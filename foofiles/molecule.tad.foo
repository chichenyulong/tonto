!==============================================================================-
!
! MOLECULE.TAD: Transferable atomic densities: Hirshfeld atom
! refinement, invarioms and related concepts.
!
! Copyright (C) Dylan Jayatilaka, 2012
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!==============================================================================-


module MOLECULE.TAD

   implicit none

contains

   refinement ::: template, leaky
   ! Do an iterative X-ray structure refinement, alternating scf and
   ! fitting, until appropriately converged, normally to 0.001\sigma
      self :: INOUT

   DIE_IF(NOT .atom.associated, "no atoms to fit")
   DIE_IF(NOT .scfdata.associated,"no scfdata")
   DIE_IF(NOT .crystal.associated, "no crystal")
   DIE_IF(NOT .crystal.data.associated,"no crystal data")
   DIE_IF(NOT .crystal.xray_data.associated,"no crystal xray data")

      results,output :: BIN

      ! Output options
      results = .crystal.data.show_refinement_results
      output  = .crystal.data.show_refinement_output

      ! ANO's and interpolators?
      .SCF:make_Hirshfeld_inputs

      ! Initial SCF
      if (.density_matrix.disassociated) then

         if (output) then
            stdout.flush
            stdout.text("Initial density matrix for refinement ...")
         end

         ! Initial promolecule SCF
         if (.scfdata.using_cluster_charges) .SCF:promolecule_scf

         .SCF:scf

      end

      ! Always use initial_density for stability
      .scfdata.set_initial_density(.scfdata.spinorbital_kind)

      ! Initial F_calc's for pruning
      if (NOT .crystal.data.reflections.have_F_pred) then
         if (output) then
            stdout.flush
            stdout.text("Making F_pred ...")
         end
         .XTAL:make_X_structure_factors
      end

      ! Prune?
      if (.crystal.data.is_F_calc_prunable) then
       
         ! Prune
         if (output) then
            stdout.flush
            stdout.text("Pruning reflections with F_pred/F_calc for refinement ...")
         end
         .crystal.data.prune_reflections

      end

      ! Initialize message
      if (output) then
         stdout.flush
         stdout.text("Starting refinement ...")
      end

      .crystal.initialize_refinement_data

      ! Turn off unwanted printing ...
      .crystal.data.set_refine_structure(TRUE)
      .crystal.data.set_fit_structure(FALSE)
      .scfdata.set_output(FALSE)

      ! Banner, options/switches, initial parameters,
      ! start banner, and iteration table header
      if (output) then
         .crystal.put_refinement_header_info
      end

      do

         ! SCF
         if (.crystal.data.ref_iteration>0) then
            if (.crystal.data.restart_HAR_with_promolecule) &
            .SCF:promolecule_scf
            .SCF:scf
         end

         !!!!!!!!
         .:LS_FIT
         !!!!!!!!

         ! Update geometry & errors
         .crystal.update_refinement_parameters
         .crystal.update_refinement_ESDs

         ! Put the iteration results
         if (output) then
            .crystal.data.put_refinement_table_body
         end

         ! Finished?
         if (.crystal.refinement_finished) exit

      end

      ! Table footer
      if (output) then
         .crystal.data.ref_table.put_footer
      end

      ! Final results
      if (results) then
         .crystal.put_refinement_results
      end

      ! Final bond lengths, angles, torsions, with errors
      if (output) then
         .crystal.put_bond_info_with_errors
      end

      ! SCF @ final geometry
      .SCF:scf
      .scfdata.set_output(TRUE) ! put back

      ! Do/put analysis info ...
      .crystal.put_data_analysis(output)
      .SCF:get_minmax_residual_density(output)

      ! Put final CIF after residuals
      .BASE:put_CIFs(with_ESDs=TRUE)

      ! Do standatd plots and properties
      if (.crystal.data.do_standard_plots) then
      end

   end

!  ======================
!  Hirshfeld atom fitting
!  ======================

   HAR_refinement ::: get_from(refinement, LS_FIT=>LS_fit_Hirshfeld_atoms), leaky
   ! Do an iterative X-ray structure refinement, alternating scf and
   ! fitting, until appropriately converged, normally to 0.001\sigma
   end

   LS_fit_Hirshfeld_atoms ::: leaky
   ! LS fit the Hirshfeld atoms to the calculated structure factors.
   ! Cartesian (bohr) coordinates are used because structure factors
   ! are aspherical and calculated from the QM wavefunction.
   ! NOTE: this routine does only one cycle of fitting with the
   ! current density matrix i.e. this is a "rigid atom fit".
   ! NOTE: It's tricky exactly which atom's are used for refinement:
   ! * Structure factors are calculated only for *unique* fragment
   !   atoms since the QM wavefunction refers to the fragment_atoms.
   ! * However, asymmetric unit atoms are used to "store" the updating
   !   geometry; thus unique fragment atom pADPs and shifts are
   !   calculated (and derivatives with respect to the fragment atom
   !   positions and ADPs) but these parameters and shifts are later
   !   transformed back into asymmetric unit.
      self :: INOUT

      sf_n :: MAT{CPX}*

      ! Hirshfeld-atom structure factors
      .SCF:make_Hirshfeld_inputs
      .TAD:get_unique_Hirshfeld_atom_SFs(sf_n) 

      ! Do a least squares
      .TAD:LS_fit_using(sf_n,.crystal.data.show_fit_output,.crystal.data.show_fit_results)

      ! Clean up
      sf_n.destroy

   end

   get_unique_Hirshfeld_atom_SFs(sf_n) ::: leaky, private
   ! Get "sf_n", the static structure factors for the symmetry related
   ! K points with *no* thermal smearing, for every unique atom.
   ! NOTE: "sf_n" is the FT rho_a(r), eqn (3) in Jayatilaka 2008,
   ! Acta Cryst A 64 p. 383-393. It is also f_a(q) in eqn (11) except
   ! without the thermal smearing factor.
      self :: INOUT
      sf_n :: MAT{CPX}*

   ENSURE(.basis_info_made,"no basis info")
   ENSURE(.atom.associated,"no atom list")
   ENSURE(.becke_grid.associated,"no becke_grid")
   ENSURE(.becke_grid.finalized,"becke_grid not finalized")
   ENSURE(.density_matrix.associated, "no density matrix")
   ENSURE(.crystal.associated, "no crystal")
   ENSURE(.crystal.data.associated, "no reflection data")
   ENSURE(.crystal.xray_data.associated, "no x-ray reflection data")
   ENSURE(.crystal.fragment_info_made, "no crystal fragment info")

      ra :: VEC{REAL}(3)
      sf_u :: VEC{CPX}*
      Wc,wt, xa,ya,za,a2 :: VEC{REAL}*
      rho, k1,k2,k3, r1,r2,r3, ga,gb :: VEC{REAL}*
      overlapping_atom, pi,pj,pn :: VEC{INT}*
      skipa0,skipab,skipa,skipb :: VEC{BIN}*
      k_pts,pt,grida,gridb,bf_save :: MAT{REAL}*
      sha :: SHELL1
      bf_skip :: VEC{VEC_{BIN}}*
      bf_grid :: VEC{MAT_{REAL}}*
      sf   :: CPX
      cutoff,rf, k1k,k2k,k3k,kr, Dab, fac, val :: REAL
      n_atom,n_k,n_pt,n_keep, u,c,ca,cb, oa,fsa,lsa,fba, ob,fsb,lsb :: INT
      sa,fa,la,na, sb,fb,lb,nb, as, a,b,i,j,k,n,p :: INT

      ! Asymmetric unit atoms
      n_atom = .crystal.asymmetric_unit_atom.dim

      ! Symmetry generated K points and SF's
      n_k = .crystal.n_unique_SF_k_pts

      ! Allocate structure factor array (leaky)
      sf_n.create(n_k,n_atom)

      ! Make list of symmetry non-equivalent symops
      ! and the necessary k points
      k_pts.create(n_k,3)
      .crystal.data.reflections.make_unique_SF_k_pts(k_pts,.crystal.spacegroup,.crystal.unit_cell)
      k1 => k_pts(:,1)
      k2 => k_pts(:,2)
      k3 => k_pts(:,3)

      ! Density matrix (leaky)
      .BASE:make_ao_density_matrix
      ENSURE(.density_matrix.restricted.associated, "no restricted DM")

      ! Set up grids, atomic densities, overlapping_atoms (leaky)
      .SCF:make_Hirshfeld_inputs(skip_NOs=TRUE)

      ! Basis function cutoff
      cutoff = .becke_grid.basis_function_cutoff

      ! Max no of becke grid points per atom
      n_pt = .becke_grid.max_no_of_points_per_atom

      ! Atom "a" displaced points and skip switches
      xa.create(n_pt)
      ya.create(n_pt)
      za.create(n_pt)
      a2.create(n_pt)
      skipa0.create(n_pt)
      skipab.create(n_pt)

      ! Make the SF's
      sf_n = ZERO

      ! Loop over integration atoms "c"
      parallel do u = 1,.crystal.n_unique_frag_atoms

         c = .crystal.unique_frag_atom(u)
       ! a = .crystal.asym_atom_for_frag_atom(c)

         ! Repetition factor for this atom
         rf = .crystal.repetition_factor(c)
         if (rf.is_zero) cycle
         rf = ONE/rf

         ! Overlapping atoms
         overlapping_atom => .overlapping_atoms_for_atom(c).element

         ! Get the Becke grid for atom "c" (leaky)
         .becke_grid.make_grid(pt,wt,bf_save,c)
         n_pt = pt.dim1

         ! Make stockholder weight function "Wc" for atom "c"
         ! If using interpolatators, then on overlapping atoms
         ! are used ... otherwise nothing is skipped
         Wc.create(n_pt)
         if (.use_interpolators) then; .GRID:make_stockholder_atom_grid(Wc,c,pt,overlapping_atom)
         else;                         .GRID:make_stockholder_atom_grid(Wc,c,pt)
         end

         ! Incorporate integration weight
         wt = Wc*wt
         Wc.destroy

         ! Prune the grid with new "wt", get saved bf grid bf_save,
         ! and new no of points, n_pt (leaky)
         .becke_grid.prune_grid(pt,wt,bf_save)
         n_pt = pt.dim1

         ! Basis function grid and skip list
         bf_skip.create(.n_shell)
         bf_grid.create(.n_shell)

         ! Density for atom "c"
         rho.create(n_pt)
         rho = ZERO

         ! Loop c-overlapping atoms a
         do ca = 1,overlapping_atom.dim

            oa  = overlapping_atom(ca)
            fsa = .first_shell_for_atom(oa)
            lsa =  .last_shell_for_atom(oa)
            fba = .first_basis_fn_for_atom(oa)
            ra  = .atom(oa).position

            ! Make the displaced points for atom "a"
            .atom(oa).make_displaced_skip_pts(xa,ya,za,a2,skipa0,pt,n_pt,cutoff)

            ! Loop shells on atom a
            do sa = fsa,lsa

               ! Shell a limits
               fa = .first_basis_fn_for_shell(sa)
               la =  .last_basis_fn_for_shell(sa)
               na = la - fa + 1
               as = .basis_shell_for_shell(sa)

               ! Set shell "sa"
               sha = .precomputed_basis_shellpair(as,1).a
               sha.position = ra

               ! Make shell "sa" skip list
               skipa.create(n_pt)
               sha.make_skip_list(skipa,n_keep,a2,skipa0,n_pt,cutoff)

               ! Next shell "sa" if no sig. points
               if (n_keep==0) then
                  skipa.destroy
                  cycle
               end

               ! Assign the "sa" skipa list
               bf_skip(sa).element => skipa

               ! Make/copy the "sa" basis function grida
               ! This must be copied since skipa could be TRUE
               grida.create(n_keep,na)
               if (oa/=c) then
                  ! Calculate grid if necessary
                  sha.make_skip_grid(grida,n_keep,na,xa,ya,za,a2,skipa,n_pt)
               else
                  ! Extract grid values from saved grid values
                  do a = 1,na
                     i = 0
                     do n = 1,n_pt
                        if (skipa(n)) cycle
                        i = i + 1
                        grida(i,a) = bf_save(n,a+fa-fba)
                     end
                  end
               end
               bf_grid(sa).element => grida

               ! Loop c-overlapping atoms b
               do cb = 1,ca

                  ob  = overlapping_atom(cb)
                  fsb = .first_shell_for_atom(ob)
                  lsb =  .last_shell_for_atom(ob)

                  ! Loop shells on atom b
                  do sb = fsb,min(lsb,sa)

                     ! No significant points ... save time!
                     if (bf_skip(sb).element.disassociated) cycle

                     ! Shell b limits
                     fb = .first_basis_fn_for_shell(sb)
                     lb = .last_basis_fn_for_shell(sb)
                     nb = lb - fb + 1

                     ! Set the "sb" basis function grid
                     skipb => bf_skip(sb).element
                     gridb => bf_grid(sb).element

                     ! How many points in common? Save time?
                     skipab(1:n_pt) = skipa OR skipb
                     n_keep = count(NOT skipab(1:n_pt))
                     if (n_keep==0) cycle

                     ! Factor
                     fac = TWO
                     if (sa==sb) fac = ONE

                     ! Density block

                     if (na*nb==1) then ! s.s product

                        ! Add density contribution to rho
                        ga => grida(:,1)
                        gb => gridb(:,1)
                        Dab = fac*.density_matrix.restricted(fa,fb)
                        i = 0; j = 0
                        do n = 1,n_pt
                           if (NOT skipa(n)) i = i + 1
                           if (NOT skipb(n)) j = j + 1
                           if (skipab(n)) cycle
                           val    = ga(i)*gb(j)*Dab
                           rho(n) = rho(n) + val
                        end

                     else              ! not s.s product

                        ! Create space for gathered index info
                        pi.create(n_keep)
                        pj.create(n_keep)
                        pn.create(n_keep)

                        ! Make mapper arrays
                        p = 0; i = 0; j = 0
                        do n = 1,n_pt
                           if (NOT skipa(n)) i = i + 1
                           if (NOT skipb(n)) j = j + 1
                           if (skipab(n)) cycle
                           p = p + 1
                           pi(p) = i
                           pj(p) = j
                           pn(p) = n
                        end

                        ! Add density contribution to rho
                        do a = 1,na
                           ga => grida(:,a)
                           do b = 1,nb
                              gb  => gridb(:,b)
                              Dab = fac*.density_matrix.restricted(fa+a-1,fb+b-1)
                              do p = 1,n_keep
                                 i = pi(p)
                                 j = pj(p)
                                 n = pn(p)
                                 val    = ga(i)*gb(j)*Dab
                                 rho(n) = rho(n) + val
                              end
                           end
                        end

                        ! Clean up
                        pn.destroy
                        pj.destroy
                        pi.destroy

                     end

                  end
               end
            end
         end

         ! Grid points
         r1 => pt(:,1)
         r2 => pt(:,2)
         r3 => pt(:,3)

         ! Weight the atom "c" density
         rho = rho*wt

         ! Make the (unique) matrix elements
         sf_u => sf_n(:,u)
         do k = 1,n_k
            k1k = k1(k)
            k2k = k2(k)
            k3k = k3(k)
            sf = IMAGIFY(ZERO)
            do i = 1,n_pt
               kr = k1k*r1(i)+k2k*r2(i)+k3k*r3(i)
               sf = sf + rho(i)*COMPLEXIFY(cos(kr),sin(kr))
            end
            sf_u(k) = sf * rf
         end

         ! Clean up atom "c" stuff
         rho.destroy
         bf_grid.destroy
         bf_skip.destroy
         bf_save.destroy
         wt.destroy
         pt.destroy

      end ! -- loop over atom "c"

      ! Clean up
      skipab.destroy
      skipa0.destroy
      a2.destroy
      za.destroy
      ya.destroy
      xa.destroy
      k_pts.destroy

      ! Parallel
      if (DO_IN_PARALLEL) then
         PARALLEL_SUM(sf_n)
      end

      if (.BASE:debugging("get_unique_Hirshfeld_atom_SFs")) then
         stdout.text("sf_n:")
         stdout.put(sf_n)
      end

   end

   get_full_Hirshfeld_atom_SFs(sf_n) ::: leaky, private
   ! Get "sf_n", the static structure factors for the symmetry related
   ! K points with *no* thermal smearing, for every unique atom.
   ! NOTE: "sf_n" is the FT rho_a(r), eqn (3) in Jayatilaka 2008,
   ! Acta Cryst A 64 p. 383-393. It is also f_a(q) in eqn (11) except
   ! without the thermal smearing factor.
      self :: INOUT
      sf_n :: MAT{CPX}*

   ENSURE(.basis_info_made,"no basis info")
   ENSURE(.atom.associated,"no atom list")
   ENSURE(.becke_grid.associated,"no becke_grid")
   ENSURE(.becke_grid.finalized,"becke_grid not finalized")
   ENSURE(.density_matrix.associated, "no density matrix")
   ENSURE(.crystal.associated, "no crystal")
   ENSURE(.crystal.data.associated, "no reflection data")
   ENSURE(.crystal.xray_data.associated, "no x-ray reflection data")
   ENSURE(.crystal.fragment_info_made, "no crystal fragment info")

      ra :: VEC{REAL}(3)
      sf_u :: VEC{CPX}*
      Wc,wt, xa,ya,za,a2 :: VEC{REAL}*
      rho, k1,k2,k3, r1,r2,r3, ga,gb :: VEC{REAL}*
      overlapping_atom, pi,pj,pn :: VEC{INT}*
      skipa0,skipab,skipa,skipb :: VEC{BIN}*
      k_pts,pt,grida,gridb,bf_save :: MAT{REAL}*
      sha :: SHELL1
      bf_skip :: VEC{VEC_{BIN}}*
      bf_grid :: VEC{MAT_{REAL}}*
      sf   :: CPX
      cutoff,rf, k1k,k2k,k3k,kr, Dab, fac, val :: REAL
      n_atom,n_k,n_pt,n_keep, u,c,ca,cb, oa,fsa,lsa,fba, ob,fsb,lsb :: INT
      sa,fa,la,na, sb,fb,lb,nb, as, a,b,i,j,k,n,p :: INT

      ! Asymmetric unit atoms
      n_atom = .crystal.asymmetric_unit_atom.dim

      ! Symmetry generated K points and SF's
      n_k = .crystal.n_symop_generated_SF_k_pts

      ! Allocate structure factor array (leaky)
      sf_n.create(n_k,n_atom)

      ! Make list of symmetry non-equivalent symops
      ! and the necessary k points
      k_pts.create(n_k,3)
      .crystal.data.reflections.make_symop_generated_SF_k_pts(k_pts,.crystal.spacegroup,.crystal.unit_cell)
      k1 => k_pts(:,1)
      k2 => k_pts(:,2)
      k3 => k_pts(:,3)

      ! Density matrix (leaky)
      .BASE:make_ao_density_matrix
      ENSURE(.density_matrix.restricted.associated, "no restricted DM")

      ! Set up grids, atomic densities, overlapping_atoms (leaky)
      .SCF:make_Hirshfeld_inputs(skip_NOs=TRUE)

      ! Basis function cutoff
      cutoff = .becke_grid.basis_function_cutoff

      ! Max no of becke grid points per atom
      n_pt = .becke_grid.max_no_of_points_per_atom

      ! Atom "a" displaced points and skip switches
      xa.create(n_pt)
      ya.create(n_pt)
      za.create(n_pt)
      a2.create(n_pt)
      skipa0.create(n_pt)
      skipab.create(n_pt)

      ! Make the SF's
      sf_n = ZERO

      ! Loop over integration atoms "c"
      parallel do u = 1,.crystal.n_unique_frag_atoms

         c = .crystal.unique_frag_atom(u)
       ! a = .crystal.asym_atom_for_frag_atom(c)

         ! Repetition factor for this atom
         rf = .crystal.repetition_factor(c)
         if (rf.is_zero) cycle
         rf = ONE/rf

         ! Overlapping atoms
         overlapping_atom => .overlapping_atoms_for_atom(c).element

         ! Get the Becke grid for atom "c" (leaky)
         .becke_grid.make_grid(pt,wt,bf_save,c)
         n_pt = pt.dim1

         ! Make stockholder weight function "Wc" for atom "c"
         ! If using interpolatators, then on overlapping atoms
         ! are used ... otherwise nothing is skipped
         Wc.create(n_pt)
         if (.use_interpolators) then; .GRID:make_stockholder_atom_grid(Wc,c,pt,overlapping_atom)
         else;                         .GRID:make_stockholder_atom_grid(Wc,c,pt)
         end

         ! Incorporate integration weight
         wt = Wc*wt
         Wc.destroy

         ! Prune the grid with new "wt", get saved bf grid bf_save,
         ! and new no of points, n_pt (leaky)
         .becke_grid.prune_grid(pt,wt,bf_save)
         n_pt = pt.dim1

         ! Basis function grid and skip list
         bf_skip.create(.n_shell)
         bf_grid.create(.n_shell)

         ! Density for atom "c"
         rho.create(n_pt)
         rho = ZERO

         ! Loop c-overlapping atoms a
         do ca = 1,overlapping_atom.dim

            oa  = overlapping_atom(ca)
            fsa = .first_shell_for_atom(oa)
            lsa =  .last_shell_for_atom(oa)
            fba = .first_basis_fn_for_atom(oa)
            ra  = .atom(oa).position

            ! Make the displaced points for atom "a"
            .atom(oa).make_displaced_skip_pts(xa,ya,za,a2,skipa0,pt,n_pt,cutoff)

            ! Loop shells on atom a
            do sa = fsa,lsa

               ! Shell a limits
               fa = .first_basis_fn_for_shell(sa)
               la =  .last_basis_fn_for_shell(sa)
               na = la - fa + 1
               as = .basis_shell_for_shell(sa)

               ! Set shell "sa"
               sha = .precomputed_basis_shellpair(as,1).a
               sha.position = ra

               ! Make shell "sa" skip list
               skipa.create(n_pt)
               sha.make_skip_list(skipa,n_keep,a2,skipa0,n_pt,cutoff)

               ! Next shell "sa" if no sig. points
               if (n_keep==0) then
                  skipa.destroy
                  cycle
               end

               ! Assign the "sa" skipa list
               bf_skip(sa).element => skipa

               ! Make/copy the "sa" basis function grida
               ! This must be copied since skipa could be TRUE
               grida.create(n_keep,na)
               if (oa/=c) then
                  ! Calculate grid if necessary
                  sha.make_skip_grid(grida,n_keep,na,xa,ya,za,a2,skipa,n_pt)
               else
                  ! Extract grid values from saved grid values
                  do a = 1,na
                     i = 0
                     do n = 1,n_pt
                        if (skipa(n)) cycle
                        i = i + 1
                        grida(i,a) = bf_save(n,a+fa-fba)
                     end
                  end
               end
               bf_grid(sa).element => grida

               ! Loop c-overlapping atoms b
               do cb = 1,ca

                  ob  = overlapping_atom(cb)
                  fsb = .first_shell_for_atom(ob)
                  lsb =  .last_shell_for_atom(ob)

                  ! Loop shells on atom b
                  do sb = fsb,min(lsb,sa)

                     ! No significant points ... save time!
                     if (bf_skip(sb).element.disassociated) cycle

                     ! Shell b limits
                     fb = .first_basis_fn_for_shell(sb)
                     lb = .last_basis_fn_for_shell(sb)
                     nb = lb - fb + 1

                     ! Set the "sb" basis function grid
                     skipb => bf_skip(sb).element
                     gridb => bf_grid(sb).element

                     ! How many points in common? Save time?
                     skipab(1:n_pt) = skipa OR skipb
                     n_keep = count(NOT skipab(1:n_pt))
                     if (n_keep==0) cycle

                     ! Factor
                     fac = TWO
                     if (sa==sb) fac = ONE

                     ! Density block

                     if (na*nb==1) then ! s.s product

                        ! Add density contribution to rho
                        ga => grida(:,1)
                        gb => gridb(:,1)
                        Dab = fac*.density_matrix.restricted(fa,fb)
                        i = 0; j = 0
                        do n = 1,n_pt
                           if (NOT skipa(n)) i = i + 1
                           if (NOT skipb(n)) j = j + 1
                           if (skipab(n)) cycle
                           val    = ga(i)*gb(j)*Dab
                           rho(n) = rho(n) + val
                        end

                     else              ! not s.s product

                        ! Create space for gathered index info
                        pi.create(n_keep)
                        pj.create(n_keep)
                        pn.create(n_keep)

                        ! Make mapper arrays
                        p = 0; i = 0; j = 0
                        do n = 1,n_pt
                           if (NOT skipa(n)) i = i + 1
                           if (NOT skipb(n)) j = j + 1
                           if (skipab(n)) cycle
                           p = p + 1
                           pi(p) = i
                           pj(p) = j
                           pn(p) = n
                        end

                        ! Add density contribution to rho
                        do a = 1,na
                           ga => grida(:,a)
                           do b = 1,nb
                              gb  => gridb(:,b)
                              Dab = fac*.density_matrix.restricted(fa+a-1,fb+b-1)
                              do p = 1,n_keep
                                 i = pi(p)
                                 j = pj(p)
                                 n = pn(p)
                                 val    = ga(i)*gb(j)*Dab
                                 rho(n) = rho(n) + val
                              end
                           end
                        end

                        ! Clean up
                        pn.destroy
                        pj.destroy
                        pi.destroy

                     end

                  end
               end
            end
         end

         ! Grid points
         r1 => pt(:,1)
         r2 => pt(:,2)
         r3 => pt(:,3)

         ! Weight the atom "c" density
         rho = rho*wt

         ! Make the (unique) matrix elements
         sf_u => sf_n(:,u)
         do k = 1,n_k
            k1k = k1(k)
            k2k = k2(k)
            k3k = k3(k)
            sf = IMAGIFY(ZERO)
            do i = 1,n_pt
               kr = k1k*r1(i)+k2k*r2(i)+k3k*r3(i)
               sf = sf + rho(i)*COMPLEXIFY(cos(kr),sin(kr))
            end
            sf_u(k) = sf * rf
         end

         ! Clean up atom "c" stuff
         rho.destroy
         bf_grid.destroy
         bf_skip.destroy
         bf_save.destroy
         wt.destroy
         pt.destroy

      end ! -- loop over atom "c"

      ! Clean up
      skipab.destroy
      skipa0.destroy
      a2.destroy
      za.destroy
      ya.destroy
      xa.destroy
      k_pts.destroy

      ! Parallel
      if (DO_IN_PARALLEL) then
         PARALLEL_SUM(sf_n)
      end

      if (.BASE:debugging("get_unique_Hirshfeld_atom_SFs")) then
         stdout.text("sf_n:")
         stdout.put(sf_n)
      end

   end

!  ==================
!  KM atom refinement
!  ==================

   KM_refinement ::: get_from(refinement, LS_FIT=>LS_fit_KM_atoms), leaky
   ! Do an iterative X-ray structure refinement, alternating scf and
   ! fitting, until appropriately converged, normally to 0.001\sigma
   end

   LS_fit_KM_atoms ::: leaky
   ! LS fit the KM atoms to the calculated structure factors.
   ! Cartesian (bohr) coordinates are used because structure factors
   ! are aspherical and calculated from the QM wavefunction.
   ! NOTE: this routine does only one cycle of fitting with the
   ! current density matrix i.e. this is a "rigid atom fit".
   ! NOTE: It's tricky exactly which atom's are used for refinement:
   ! * Structure factors are calculated only for *unique* fragment
   !   atoms since the QM wavefunction refers to the fragment_atoms.
   ! * However, asymmetric unit atoms are used to "store" the updating
   !   geometry; thus unique fragment atom pADPs and shifts are
   !   calculated (and derivatives with respect to the fragment atom
   !   positions and ADPs) but these parameters and shifts are later
   !   transformed back into asymmetric unit.
      self :: INOUT

   ENSURE(.atom.associated, "no atoms to fit")
   ENSURE(.becke_grid.associated,"no becke_grid")
   ENSURE(.becke_grid.finalized,"becke_grid not finalized")
   ENSURE(.crystal.associated, "no crystal")
   ENSURE(.crystal.data.associated,"no crystal data")
   ENSURE(.crystal.xray_data.associated,"no crystal xray data")
   ENSURE(.crystal.fragment_info_made, "no crystal fragment info")

      sf_n :: MAT{CPX}*

      ! Koritsanszky-Michael atom SF's
      .TAD:get_unique_KM_atom_SFs(sf_n)

      ! Do a least squares
      .TAD:LS_fit_using(sf_n,.crystal.data.show_fit_output,.crystal.data.show_fit_results)

      ! Clean up
      sf_n.destroy

   end

   get_unique_KM_atom_SFs(sf_n) ::: leaky, private
   ! Get "sf_n", the IAM structure factors for the symmetry generated
   ! K points with *no* thermal smearing, for every unique atom.
      self :: IN
      sf_n :: MAT{CPX}*

   ENSURE(.basis_info_made,"no basis info")
   ENSURE(.atom.associated,"no atom list")
   ENSURE(.crystal.associated, "no crystal")
   ENSURE(.crystal.data.associated, "no reflection data")
   ENSURE(.crystal.xray_data.associated, "no x-ray reflection data")
   ENSURE(.crystal.asymmetric_unit_atom.associated,"no asymmetric unit atoms")
   ENSURE(.crystal.unique_atom_for_frag_atom.associated,"no unique-frag_atom")
   ENSURE(.crystal.asym_atom_for_frag_atom.associated,"no asym-frag_atom")
   ENSURE(.density_matrix.associated, "no density matrix")

      FT :: MAT3{CPX}*
      k_pts,part :: MAT{REAL}*
      ra, rb :: VEC{REAL}(3)
      n_atom,n_k,k, u,c :: INT
      a,b, fsa,lsa, fsb,lsb :: INT
      sa,fa,la,na,as, sb,fb,lb,nb,bs :: INT
      rf :: REAL
      sh :: SHELL2

      ! Asymmetric unit atoms;
      ! Symmetry generated K points and SF's
      n_atom = .crystal.asymmetric_unit_atom.dim
      n_k    = .crystal.n_symop_generated_SF_k_pts

      ! Allocate structure factor array (leaky)
      sf_n.create(n_k,n_atom)

      ! Make list of symmetry non-equivalent symops
      ! and the necessary k points
      k_pts.create(n_k,3)
      .crystal.data.reflections.make_symop_generated_SF_k_pts(k_pts,.crystal.spacegroup,.crystal.unit_cell)

      ! Density matrix (leaky)
      .BASE:make_ao_density_matrix
      ENSURE(.density_matrix.restricted.associated, "no restricted DM")

      ! Make the SF's
      sf_n = ZERO

      ! Loop over integration atoms "c"
      do u = 1,.crystal.n_unique_frag_atoms

         ! Atoms
         c = .crystal.unique_frag_atom(u)
         a = .crystal.asym_atom_for_frag_atom(c)

         ! Repetition (site-symmetry) factor
         rf = .crystal.asym_atom_rep_factor(a)
         if (rf.is_zero) cycle
         rf = ONE/rf

         a = c

         fsa = .first_shell_for_atom(a)
         lsa =  .last_shell_for_atom(a)
         ra  = .atom(a).position

         ! Loop shells on atom a
         do sa = fsa,lsa

            ! Shell a limits
            fa = .first_basis_fn_for_shell(sa)
            la =  .last_basis_fn_for_shell(sa)
            na = la - fa + 1
            as = .basis_shell_for_shell(sa)

            ! Loop c-overlapping atoms b
            do b = 1,.atom.dim

               fsb = .first_shell_for_atom(b)
               lsb =  .last_shell_for_atom(b)
               rb  = .atom(b).position

               ! Loop shells on atom b
               do sb = fsb,lsb

                  ! Shell b limits
                  fb = .first_basis_fn_for_shell(sb)
                  lb = .last_basis_fn_for_shell(sb)
                  nb = lb - fb + 1
                  bs = .basis_shell_for_shell(sb)

                  ! Set shells
                  sh.a = .precomputed_basis_shellpair(as,bs).a
                  sh.b = .precomputed_basis_shellpair(as,bs).b
                  sh.a.position = ra
                  sh.b.position = rb

                  ! Partitions & Structure factors
                  FT.create(n_k,na,nb)
                  part.create(sh.a.n_cc,sh.b.n_cc)
                  sh.make_KM_partition(part)
                  sh.make_FT_parted_c(FT,k_pts(:,1),k_pts(:,2),k_pts(:,3),part)

                  ! Do trace
                  do k = 1,n_k
                     sf_n(k,u) = sf_n(k,u) &
                               + sum( FT(k,:,:) * .density_matrix.restricted(fa:la,fb:lb) )
                  end

                  ! Clean
                  part.destroy
                  FT.destroy

               end
            end
         end

         ! Scale
         sf_n(:,u) = sf_n(:,u) * rf

      end

      ! Clean up
      k_pts.destroy

   end

!  ==============
!  NAO refinement
!  ==============

!   NAO_refinement ::: get_from(refinement, FIT_ATOMS=>fit_KM_atoms), leaky
!   ! Do an iterative X-ray structure refinement, alternating scf and
!   ! fitting, until appropriately converged, normally to 0.001\sigma
!   end

!   NAO_rigid_fit ::: leaky
!   ! Do an NAO refinement
!   ! Cartesian (bohr) coordinates are used because structure factors
!   ! are aspherical and calculated from the QM wavefunction.
!   ! NOTE: this routine does only one cycle of fitting with the
!   ! current density matrix i.e. this is a "rigid atom fit".
!   ! NOTE: It's tricky exactly which atom's are used for refinement:
!   ! * Structure factors are calculated only for *unique* fragment
!   !   atoms since the QM wavefunction refers to the fragment_atoms.
!   ! * However, asymmetric unit atoms are used to "store" the updating
!   !   geometry; thus unique fragment atom pADPs and shifts are
!   !   calculated (and derivatives with respect to the fragment atom
!   !   positions and ADPs) but these parameters and shifts are later
!   !   transformed back into asymmetric unit.
!
!   ENSURE(.atom.associated, "no atoms to fit")
!   ENSURE(.becke_grid.associated,"no becke_grid")
!   ENSURE(.becke_grid.finalized,"becke_grid not finalized")
!   ENSURE(.crystal.associated, "no crystal")
!   ENSURE(.crystal.data.associated,"no crystal data")
!   ENSURE(.crystal.xray_data.associated,"no crystal xray data")
!   ENSURE(.crystal.fragment_info_made, "no crystal fragment info")
!
!      sf_n :: MAT{CPX}*
!      keep :: BIN
!
!      ! Set up NAOs
!      .SCF:make_NAOs
!      .BASE:make_aspherical_atoms
!
!      keep = .crystal.data.use_IAM_density
!      .crystal.data.set_use_IAM_density(TRUE)
!      .crystal.data.set_use_IAM_ITC_FFs(FALSE)
!
!      ! Get atom SF's
!      .TAD:get_unique_NAO_atom_SFs(sf_n)
!
!
!      ! Do a least squares
!      .TAD:LS_fit_using(sf_n,.crystal.data.show_fit_output,.crystal.data.show_fit_results)
!
!      ! Clean up
!      sf_n.destroy
!
!   end

!   get_unique_NAO_atom_SFs(sf_n) ::: leaky, private
!   ! Get "sf_n", the IAM structure factors for the symmetry generated
!   ! K points with *no* thermal smearing, for every unique atom.
!      sf_n :: MAT{CPX}*
!
!   ENSURE(.basis_info_made,"no basis info")
!   ENSURE(.atom.associated,"no atom list")
!   ENSURE(.crystal.associated, "no crystal")
!   ENSURE(.crystal.data.associated, "no reflection data")
!   ENSURE(.crystal.xray_data.associated, "no x-ray reflection data")
!   ENSURE(.crystal.data.use_IAM_density,"not using IAM density!")
!   ENSURE(.crystal.asymmetric_unit_atom.associated,"no asymmetric unit atoms")
!   ENSURE(.crystal.unique_atom_for_frag_atom.associated,"no unique-frag_atom")
!   ENSURE(.crystal.asym_atom_for_frag_atom.associated,"no asym-frag_atom")
!
!      k_pts :: MAT{REAL}*
!      n_atom,n_k, u,c,a :: INT
!      rf :: REAL
!      old :: BIN
!
!      ! Asymmetric unit atoms;
!      ! Symmetry generated K points and SF's
!      n_atom = .crystal.asymmetric_unit_atom.dim
!      n_k    = .crystal.n_unique_SF_k_pts
!
!      ! Allocate structure factor array (leaky)
!      sf_n.create(n_k,n_atom)
!
!      ! Make list of symmetry non-equivalent symops
!      ! and the necessary k points
!      k_pts.create(n_k,3)
!      .crystal.data.reflections.make_unique_SF_k_pts(k_pts,.crystal.spacegroup,.crystal.unit_cell)
!
!      ! Make the SF's
!      sf_n = ZERO
!
!      ! Loop over integration atoms "c"
!      do u = 1,.crystal.n_unique_frag_atoms
!
!         ! Atoms
!         c = .crystal.unique_frag_atom(u)
!         a = .crystal.asym_atom_for_frag_atom(c)
!
!         ! Structure factors
!         old = .atom(c).use_IAM_ITC_FFs
!         .atom(c).set_use_IAM_ITC_FFs(FALSE)
!         .atom(c).make_FT(sf_n(:,u),k_pts)
!         .atom(c).set_use_IAM_ITC_FFs(old)  ! Put back
!
!         ! Repetition (site-symmetry) factor
!         rf = .crystal.asym_atom_rep_factor(a)
!         if (rf.is_zero) cycle
!         rf = ONE/rf
!
!         ! Scale
!         sf_n(:,u) = sf_n(:,u) * rf
!
!      end
!
!      ! Clean up
!      k_pts.destroy
!
!   end

!  ==============
!  IAM refinement
!  ==============

   IAM_refinement
   ! Do an IAM refinement. Actually this is just a fit.
   ! Cartesian (bohr) coordinates are used because structure factors
   ! are aspherical and calculated from the QM wavefunction.
   ! NOTE: this routine does only one cycle of fitting with the
   ! current density matrix i.e. this is a "rigid atom fit".
   ! NOTE: It's tricky exactly which atom's are used for refinement:
   ! * Structure factors are calculated only for *unique* fragment
   !   atoms since the QM wavefunction refers to the fragment_atoms.
   ! * However, asymmetric unit atoms are used to "store" the updating
   !   geometry; thus unique fragment atom pADPs and shifts are
   !   calculated (and derivatives with respect to the fragment atom
   !   positions and ADPs) but these parameters and shifts are later
   !   transformed back into asymmetric unit.
      self :: INOUT

   ENSURE(.atom.associated, "no atoms to fit")
   ENSURE(.crystal.associated, "no crystal")
   ENSURE(.crystal.data.associated,"no crystal data")
   ENSURE(.crystal.xray_data.associated,"no crystal xray data")
   ENSURE(.crystal.fragment_info_made, "no crystal fragment info")

      sf_n :: MAT{CPX}*
      keep :: BIN

      ! Set IAM/save state
      keep = .crystal.data.use_IAM_density
      .crystal.data.set_use_IAM_density(TRUE)

      ! Isotropic H's?
    ! if (.crystal.data.refine_H_U_iso) .atom.set_isotropic_H_ADP

      ! Get atom SF's
    ! .TAD:get_unique_IAM_atom_SFs(sf_n)
      .TAD:get_full_IAM_atom_SFs(sf_n)

      ! Do a least squares
      .TAD:LS_fit_using(sf_n,.crystal.data.show_fit_output,.crystal.data.show_fit_results)

      ! Clean up
      sf_n.destroy

      ! Restore original state
      .crystal.data.set_use_IAM_density(keep)

      ! Do/put analysis info ...
      .crystal.put_data_analysis(output=TRUE)
      .SCF:get_minmax_residual_density(output=TRUE)

      ! Put final CIF after residuals
      .BASE:put_CIFs(with_ESDs=TRUE)

      ! Do standatd plots and properties
      if (.crystal.data.do_standard_plots) then
      end


   end

   get_unique_IAM_atom_SFs(sf_n) ::: leaky, private
   ! Get "sf_n", the IAM structure factors for the symmetry generated
   ! K points with *no* thermal smearing, for every unique atom.
      self :: INOUT
      sf_n :: MAT{CPX}*

   ENSURE(.atom.associated,"no atom list")
   ENSURE(.crystal.associated, "no crystal")
   ENSURE(.crystal.data.associated, "no reflection data")
   ENSURE(.crystal.xray_data.associated, "no x-ray reflection data")
   ENSURE(.crystal.data.use_IAM_density,"not using IAM density!")
   ENSURE(.crystal.asymmetric_unit_atom.associated,"no asymmetric unit atoms")
   ENSURE(.crystal.unique_atom_for_frag_atom.associated,"no unique-frag_atom")
   ENSURE(.crystal.asym_atom_for_frag_atom.associated,"no asym-frag_atom")

      k_pts :: MAT{REAL}*
      n_atom,n_k, u,f :: INT
      rf :: REAL
      old :: BIN
    ! rc :: VEC{REAL}(3)
    ! k  :: INT
    ! k1,k2,k3,kr :: REAL
    ! sf :: CPX

      ! Asymmetric unit atoms;
      ! Symmetry generated K points and SF's
      n_atom = .crystal.asymmetric_unit_atom.dim
      n_k    = .crystal.n_unique_SF_k_pts

      ! Allocate structure factor array (leaky)
      sf_n.create(n_k,n_atom)

      ! Make list of symmetry non-equivalent symops
      ! and the necessary k points
      k_pts.create(n_k,3)
      .crystal.data.reflections.make_unique_SF_k_pts(k_pts,.crystal.spacegroup,.crystal.unit_cell)

      ! Make the SF's
      sf_n = ZERO

      ! Loop over integration atoms "c"
      do u = 1,.crystal.n_unique_frag_atoms

         ! Atoms
         f = .crystal.unique_frag_atom(u)

         ! Structure factors
         old = .atom(f).use_IAM_ITC_FFs
         .atom(f).set_use_IAM_ITC_FFs(TRUE)
         .atom(f).make_FT(sf_n(:,u),k_pts)
         .atom(f).set_use_IAM_ITC_FFs(old)  ! Put back

         ! Repetition (site-symmetry) factor
         rf = .crystal.repetition_factor(f)
         if (rf.is_zero) cycle
         rf = ONE/rf

         ! Scale
         sf_n(:,u) = sf_n(:,u) * rf

       ! ! Add on real part of dispersion - testing only
       ! if (.crystal.data.use_real_dispersion) then
       !    sf = .atom(c).dispersion_correction * rf
       !    rc = .atom(c).position
       !    do k = 1,n_k
       !       k1 = k_pts(k,1)
       !       k2 = k_pts(k,2)
       !       k3 = k_pts(k,3)
       !       kr = k1*rc(1)+k2*rc(2)+k3*rc(3)
       !       sf_n(k,u) = sf_n(k,u) + sf*COMPLEXIFY(cos(kr),sin(kr))
       !    end
       ! end

      end

      ! Clean up
      k_pts.destroy

   end

   get_full_IAM_atom_SFs(sf_n) ::: leaky, private
   ! Get "sf_n", the IAM structure factors for the symmetry generated
   ! K points with *no* thermal smearing, for every unique atom.
      self :: INOUT
      sf_n :: MAT{CPX}*

   ENSURE(.atom.associated,"no atom list")
   ENSURE(.crystal.associated, "no crystal")
   ENSURE(.crystal.data.associated, "no reflection data")
   ENSURE(.crystal.xray_data.associated, "no x-ray reflection data")
   ENSURE(.crystal.data.use_IAM_density,"not using IAM density!")
   ENSURE(.crystal.asymmetric_unit_atom.associated,"no asymmetric unit atoms")
   ENSURE(.crystal.unique_atom_for_frag_atom.associated,"no unique-frag_atom")
   ENSURE(.crystal.asym_atom_for_frag_atom.associated,"no asym-frag_atom")

      k_pts :: MAT{REAL}*
      n_atom,n_k, u,f :: INT
      rf :: REAL
      old :: BIN
    ! rc :: VEC{REAL}(3)
    ! k  :: INT
    ! k1,k2,k3,kr :: REAL
    ! sf :: CPX

      ! Asymmetric unit atoms;
      ! Symmetry generated K points and SF's
      n_atom = .crystal.asymmetric_unit_atom.dim
      n_k    = .crystal.n_symop_generated_SF_k_pts

      ! Allocate structure factor array (leaky)
      sf_n.create(n_k,n_atom)

      ! Make list of symmetry non-equivalent symops
      ! and the necessary k points
      k_pts.create(n_k,3)
      .crystal.data.reflections.make_symop_generated_SF_k_pts(k_pts,.crystal.spacegroup,.crystal.unit_cell)

      ! Make the SF's
      sf_n = ZERO

      ! Loop over integration atoms "c"
      do u = 1,.crystal.n_unique_frag_atoms

         ! Atoms
         f = .crystal.unique_frag_atom(u)

         ! Structure factors
         old = .atom(f).use_IAM_ITC_FFs
         .atom(f).set_use_IAM_ITC_FFs(TRUE)
         .atom(f).make_FT(sf_n(:,u),k_pts)
         .atom(f).set_use_IAM_ITC_FFs(old)  ! Put back

         ! Repetition (site-symmetry) factor
         rf = .crystal.repetition_factor(f)
         if (rf.is_zero) cycle
         rf = ONE/rf

         ! Scale
         sf_n(:,u) = sf_n(:,u) * rf

       ! ! Add on real part of dispersion - testing only
       ! if (.crystal.data.use_real_dispersion) then
       !    sf = .atom(c).dispersion_correction * rf
       !    rc = .atom(c).position
       !    do k = 1,n_k
       !       k1 = k_pts(k,1)
       !       k2 = k_pts(k,2)
       !       k3 = k_pts(k,3)
       !       kr = k1*rc(1)+k2*rc(2)+k3*rc(3)
       !       sf_n(k,u) = sf_n(k,u) + sf*COMPLEXIFY(cos(kr),sin(kr))
       !    end
       ! end

      end

      ! Clean up
      k_pts.destroy

   end

!  ========================
!  Least-squares refinement
!  ========================

   LS_fit_using(sf_n,output,results) ::: leaky, private
   ! Do a least sqaures structure refinement with a given set of
   ! static aspherical form factors "sf_n". Note the dimensions.
   ! The structure factors"sf_n" when the geometry shifts.
   ! If "output"  is false, do not print any LS fit output.
   ! If "results" is false, do not print any LS fit results.
      self :: INOUT
      sf_n :: MAT{CPX}, INOUT
      output,results :: BIN, IN

   ENSURE(.atom.associated, "no atoms to fit")
   ENSURE(.crystal.associated, "no crystal")
   ENSURE(.crystal.data.associated,"no crystal data")
   ENSURE(.crystal.xray_data.associated,"no crystal xray data")
   ENSURE(.crystal.fragment_info_made, "no crystal fragment info")
   ENSURE(sf_n.dim1==.crystal.n_unique_SF_k_pts,       "sf_n: wrong dim1")
   ENSURE(sf_n.dim2==.crystal.n_asymmetric_unit_atoms, "sf_n: wrong dim2")

      ! Do the fit 
      .crystal.LS_structure_fit(sf_n,output,results)

      ! Set geometry type
      .crystal.asymmetric_unit_source = "tonto-refinement"

      ! Do/put analysis info ...
      .crystal.put_data_analysis(output)
      .SCF:get_minmax_residual_density(output)

      ! Put final CIF after residuals
      .BASE:put_CIFs(with_ESDs=TRUE)

      if (NOT .crystal.data.use_IAM_density) then

         ! Delete stored matrices
         .BASE:delete_scf_archives(keep_DM=TRUE)
         .BASE:destroy_scf_results(keep_MOs=TRUE)
         .BASE:destroy_scf_integrals

         ! Orthonormalize MO's at new geometry
         .SCF:symmetrically_orthonormalise(.molecular_orbitals)

      end

   end

!  ===============
!  Invariom labels
!  ===============

   put_smiles_invariom_labels
   ! Analyze the SCF energy into MO contributions
   ENSURE(.atom.associated,"no atoms")
      labels :: VEC{STR}*
      invariom_kind :: VEC{VEC_{INT}}*
      n_kind,n_elem,n_dash,k,l :: INT

      ! Get the invariom labels
      labels => .atom.smiles_invariom_labels

      ! Put labels out
      stdout.flush
      stdout.text("SMILES invariom labels:")
      stdout.put(labels,left=TRUE)

      ! Make the invariom kind table
      invariom_kind.repetitions_in(labels)

      ! Maximum no. of elements
      n_kind = invariom_kind.dim
      n_elem = 0
      do k = 1,n_kind
         n_elem = max(n_elem,invariom_kind(k).element.dim)
      end

      ! Put invariom kind table out
      stdout.flush
      stdout.show("No. of distinct labels =",invariom_kind.dim)
      stdout.flush
      stdout.text("Table of invariom kinds")
      stdout.flush
      n_dash = min(10,n_elem)
      stdout.dash(width=5*(n_dash+1))
      stdout.put("Kind",width=5)
      stdout.put(" #'s",width=5)
      stdout.flush
      stdout.dash(width=5*(n_dash+1))
      do k = 1,n_kind
         stdout.put(k,width=5)
         n_elem = invariom_kind(k).element.dim
         stdout.put(invariom_kind(k)[1],width=5)
         l = 1
         do
            l = l + 1
            if (l>n_elem) exit
            if (mod(l,10)==1) then
            stdout.flush
            stdout.tab(width=5)
            end
            stdout.put(invariom_kind(k)[l],width=5)
         end
         stdout.flush
      end
      stdout.dash(width=5*(n_dash+1))

      ! Cleanup
      invariom_kind.destroy
      labels.destroy

   end

   put_invariom_labels
   ! Analyze the SCF energy into MO contributions
   ENSURE(.atom.associated,"no atoms")
      labels :: VEC{STR}*
      invariom_kind :: VEC{VEC_{INT}}*

      n_kind,n_elem,n_dash,k,l :: INT

      ! Get the invariom labels
      labels => .atom.invariom_labels

      ! Put labels out
      stdout.flush
      stdout.text("Atom names and their invariom labels:")

      do k = 1,labels.dim
         stdout.put(k,width=5)
         stdout.put(.atom(k).label,width=10,left=TRUE)
         stdout.put(labels(k),width=25,left=TRUE)
         stdout.flush
      end
      stdout.flush


      ! Make the invariom kind table
      invariom_kind.repetitions_in(labels)

      ! Maximum no. of elements
      n_kind = invariom_kind.dim
      n_elem = 0
      do k = 1,n_kind
         n_elem = max(n_elem,invariom_kind(k).element.dim)
      end

      ! Put invariom kind table out
      stdout.flush
      stdout.show("No. of distinct labels =",invariom_kind.dim)
      stdout.flush
      stdout.text("Table of invariom kinds")
      stdout.flush
      n_dash = min(10,n_elem)
      stdout.dash(width=5*(n_dash+1))
      stdout.put("Kind",width=5)
      stdout.put(" #'s",width=5)
      stdout.flush
      stdout.dash(width=5*(n_dash+1))
      do k = 1,n_kind
         stdout.put(k,width=5)
         n_elem = invariom_kind(k).element.dim
         stdout.put(invariom_kind(k)[1],width=5)
         l = 1
         do
            l = l + 1
            if (l>n_elem) exit
            if (mod(l,10)==1) then
            stdout.flush
            stdout.tab(width=5)
            end
            stdout.put(invariom_kind(k)[l],width=5)
         end
         stdout.flush
      end
      stdout.dash(width=5*(n_dash+1))

      ! Cleanup
      invariom_kind.destroy
      labels.destroy

   end

   put_invariom_label
   ! Analyze the SCF energy into MO contributions
   ENSURE(.atom.associated,"no atoms")
      label :: STR
      i :: INT
      stdin.read(i)
      label = .atom.invariom_label_of(i)
      stdout.flush
      stdout.show("Invariom label for atom "//trim(i.to_str)//" = ",label)
   end

   put_next_neighbour_handedness
   ! Put the next neighbour handedness out, for the atom with the
   ! index specified in the input.
   ENSURE(.atom.associated,"no atoms")
      hand :: STR
      i :: INT
      stdin.read(i)
      hand = .atom.next_neighbour_handedness_of(i)
      stdout.flush
      stdout.show("Next-neighbour handedness of atom "//trim(i.to_str)//" = ",hand)
   end

!  ====================================
!  Spherically averaged Hirshfeld atoms
!  ====================================

   make_iterative_HAs ::: leaky
   ! Make the (iteratively) Hirshfeld atoms a la Wheatly.
   ENSURE(.atom.associated,"no atoms")
   ENSURE(.atom_info_made,"no atom info")
   ENSURE(.n_atom_kind>0,"no atom kinds")

      max_iterations :: INT

      ! Do it
      max_iterations = 250
      .:make_SAHA(max_iterations)

   end

   make_spherically_averaged_HAs ::: leaky
   ! Make the (iteratively) spherically averaged Hirshfeld atom (SAHA)
   ! density interpolators. You may specify the maximum iterations on
   ! the input line if you want; if not, it is assumed to be 1.
   ENSURE(.atom.associated,"no atoms")
   ENSURE(.atom_info_made,"no atom info")
   ENSURE(.n_atom_kind>0,"no atom kinds")

      max_iterations :: INT

      ! Read max # if iterations
      max_iterations = 1
      if (stdin.n_line_items>1) stdin.read(max_iterations)

      ! Do it
      .:make_SAHA(max_iterations)

   end

   make_SAHA(max_iterations) ::: private, leaky
   ! Make the (iteratively) spherically averaged Hirshfeld atom (SAHA)
   ! density interpolators, for every atom. NOTE: these are supposed
   ! to be the iterative stockholder atoms (ISA) of Lillestolen &
   ! Wheatley, Chem. Commun., 2008, 5909–5911.
      self :: INOUT
      max_iterations :: INT

   ENSURE(.atom.associated,"no atoms")
   ENSURE(.atom_info_made,"no atom info")
   ENSURE(.n_atom_kind>0,"no atom kinds")

      interpolator :: VEC{INTERPOLATOR}*
      rho_av :: VEC{VEC_{REAL}}*
      max_eps,eps,eps_a :: REAL
      max_l, a,iteration :: INT

      ! Parameters defining the SAHA's
      max_l          = 18     ! L-value for for spherical averaging.
      max_eps        = TOL(6) ! Maximum absolute difference for convergence

      ! Switch interpolators on
      if (NOT .use_interpolators) then
         WARN("You must be using interpolators!")
         .use_interpolators = TRUE
      end

      ! Set default template for atom interpolators
      if (.interpolator.disassociated) then
         .interpolator.create
         .interpolator.set_interpolation_method("linear")
         .interpolator.set_range_mapping("none")
         .interpolator.set_domain_mapping("sqrt(x/(1-x))*scale")
         .interpolator.set_table_length(ONE)
         .interpolator.set_spacing(0.01d0)
         .interpolator.set_table_eps(0.001d0)
      end

      ! Reset ANO interpolators
      .BASE:destroy_ANO_interpolators
      .SCF:make_Hirshfeld_inputs

      ! Copy ANO interpolators (which become IHA's)
      interpolator.create(.n_atom)
      do a = 1,.n_atom
         interpolator(a).copy(.atom(a).interpolator)
       ! interpolator(a).put
      end

      ! Reassign fresh (non-ANO) interpolator copy;
      ! Create averaged rho; set extrapolator.
      .BASE:destroy_ANOs
      rho_av.create(.n_atom)
      do a = 1,.n_atom
         .atom(a).interpolator => interpolator(a)
         rho_av(a).element.create(interpolator(a).n_data)
      end
      .atom.set_is_unique_kind(FALSE)
      .atom.set_interpolators_made(TRUE)

      ! Banner
      stdout.flush
      stdout.text("=========================================")
      stdout.text("Make spherically averaged Hirshfeld atoms")
      stdout.text("=========================================")

      stdout.flush
      if (max_iterations==1) then
      stdout.text("This will make a single-iteration average")
      else
      stdout.text("This may make an iteratively spherical averaged")
      stdout.text("Hirshfeld atom (IHA) or ISA as described by these :")
      stdout.text("Lillestolen & Wheatley, Chem. Commun., 2008, 5909–5911.")
      stdout.text("but only if the precedure converges!")
      stdout.flush
      stdout.show("Max. iterations             =",max_iterations)
      end

      stdout.show("Convergence on density      =",max_eps)
      stdout.show("L max (for spherical avg.)  =",max_l)

      stdout.flush
      stdout.dash(int_fields=1,real_fields=1)
      stdout.put("Iter",int_width=TRUE)
      stdout.put("Max change")
      stdout.flush
      stdout.dash(int_fields=1,real_fields=1)


      ! Begin iterative cycle to get the IHA
      iteration = 0

      do

         iteration = iteration + 1

         ! Spherically average & extrapolate, for each atom
         eps = ZERO
         do a = 1,.n_atom

            .:make_spherically_averaged_HA(rho_av(a).element,eps_a,a,interpolator(a),max_l)

            eps = max(eps,eps_a)

         end

         ! Update convergence
         stdout.put(iteration)
         stdout.put(eps)
         stdout.flush

         ! Transfer averaged values to atoms and interpolators
         do a = 1,.n_atom
            interpolator(a).set_data_values(rho_av(a).element)
            interpolator(a).finalize
         end

         ! Spherically avereaged Hirshfeld atoms obtained?
         if (eps<max_eps) exit
         if (iteration>max_iterations) exit

      end

      ! Footer
      stdout.dash(int_fields=1,real_fields=1)

      ! Clean up
      rho_av.destroy

   end

   make_spherically_averaged_HA(rho_av,eps,a,interpolator,l_max)
   ! Make the spherically averaged Hirshfeld atom density "rho_av" for
   ! the atom with index "a". Also return "eps", the maximum
   ! difference between the rho_av values and those stored in the
   ! interpolator data_values. The spacing and radial data values from
   ! the center of atom "a" are taken from the "interpolator". "l_max"
   ! is the maximum l value for the lebedev angular integration grid
      rho_av :: VEC{REAL}, OUT
      eps :: REAL, OUT
      a,l_max :: INT, IN
      interpolator :: INTERPOLATOR

   ENSURE(.basis_info_made,"no basis info")
   ENSURE(.atom.associated,"no atom list")
   ENSURE(.atom(1).interpolators_made,"No interpolators")
   ENSURE(rho_av.dim==interpolator.n_data,"wrong size, rho_av")
   ENSURE(a.is_in_range([1,.n_atom]),"a out of range")
   ENSURE(.overlapping_atoms_for_atom.associated,"no overlapping_atoms")

      pt :: MAT{REAL}*
      rho,Wa :: VEC{REAL}*
      pos :: VEC{REAL}(3)
      old,r :: REAL
      n_pts,n,i :: INT
      lebedev :: LEBEDEV*

      ! Set the spherical grid
      lebedev.create
      lebedev.set_l(l_max)

      ! No of quadrature points (on sphere)
      n_pts = lebedev.n_points

      ! Weight function, molecular density, spherical points
      ! and weights
      Wa.create(n_pts)
      rho.create(n_pts)
      pt.create(n_pts,3)

      ! Atom position
      pos = .atom(a).position

      ! Maximum relative difference
      eps = ZERO

    ! Debug
    ! stdout.show("atom =",a)
    ! interpolator.put

    ! stdout.put("r")
    ! stdout.put("rho_av")
    ! stdout.put("old")
    ! stdout.put("%")
    ! stdout.flush

      ! Loop over radial values
      do i = 1,interpolator.n_data

         ! Table value r
         r = interpolator.data_point(i)

         ! Interpolator data valie
         old = interpolator.data_value(i)

         ! Convert to actual r?
         if (interpolator.domain_is_sqrt_x1x) &
            r = sqrt(r/(1-r))*interpolator.domain_scale_factor

         ! For each r, make a spherical shell of points
         do n = 1,n_pts
            pt(n,1) = pos(1) + r*lebedev.point(n,1)
            pt(n,2) = pos(2) + r*lebedev.point(n,2)
            pt(n,3) = pos(3) + r*lebedev.point(n,3)
         end

         ! Weight function for atom a on the spherical shell
         .GRID:make_stockholder_atom_grid(Wa,a,pt,.overlapping_atoms_for_atom(a).element)

         ! Molecular density on the spherical shell
         .GRID:make_density_grid(rho,pt)

         ! Weighted Hirshfeld atom density on shell
         Wa  = Wa*rho*lebedev.weight

         ! Averaged value
         rho_av(i) = VEC{REAL}:sum_elements(Wa)

         ! Average percentage change
         eps = max(eps,abs((rho_av(i)-old)))

    ! del = rho_av(i)-old
    ! stdout.put(r)
    ! stdout.put(rho_av(i))
    ! stdout.put(del)
    ! stdout.flush

      end

      ! Clean up
      pt.destroy
      rho.destroy
      Wa.destroy
      lebedev.destroy

   end

!  ====================
!  Bonded density atoms
!  ====================

   make_averaged_BDAs ::: leaky
   ! Make the spherically averaged bond density atom
   ! interpolators for every atom.
      self :: INOUT

   ENSURE(.use_interpolators,"must be using interpolators")

      interpolator :: VEC{INTERPOLATOR}*
      rho_av :: VEC{VEC_{REAL}}*
      eps,eps_a :: REAL
      a,l_max,iteration :: INT

      ! Set up the template for interpolators
      if (.interpolator.disassociated) then
         .interpolator.create
         .interpolator.set_interpolation_method("cubic_spline")
         .interpolator.set_range_mapping("none")
         .interpolator.set_domain_mapping("sqrt(x/(1-x))*scale")
         .interpolator.set_table_length(ONE)
         .interpolator.set_spacing(0.001d0)
         .interpolator.set_table_eps(CLUSTER_ATOM_DENSITY_CUTOFF)
      end

      ! Set up grids, atomic densities, and NO's
      .SCF:make_Hirshfeld_inputs

      ! List of initial atom interpolators. Leaky
      interpolator.create(.n_atom)
      do a = 1,.n_atom
         interpolator(a).copy(.atom(a).interpolator)
      end

      ! Destroy atom ANO data and interpolators. Leaky.
      .BASE:destroy_ANOs
      .BASE:destroy_interpolators

      ! Set this switch
      .atom.set_interpolators_made(TRUE)

      ! The list of new atomic radial densities
      rho_av.create(.n_atom)

      ! Reassign fresh interpolator copy; create averaged rho
      do a = 1,.n_atom
         .atom(a).interpolator => interpolator(a)
         rho_av(a).element.create(interpolator(a).n_data)
      end

      ! No of Gauss-Legendre integration points
      l_max = 35

      ! Banner
      stdout.flush
      stdout.dash(int_fields=1,real_fields=1)
      stdout.put("Iter",int_width=TRUE)
      stdout.put("Max change")
      stdout.flush
      stdout.dash(int_fields=1,real_fields=1)

      ! Begin iterative cycle
      iteration = 0

      do

         iteration = iteration + 1

         stdout.show("Iteration =",iteration)

         ! Spherically average each atom
         eps = ZERO
         do a = 1,.n_atom
            .:make_averaged_BDAs(rho_av(a).element,eps_a,a,interpolator(a),l_max)
            eps = max(eps,eps_a)
         end

         ! Update convergence
         stdout.put(iteration)
         stdout.put(eps)
         stdout.flush

         ! Transfer averaged values to atoms and interpolators
         do a = 1,.n_atom
            interpolator(a).set_data_values(rho_av(a).element)
            interpolator(a).finalize
            .atom(a).interpolator => interpolator(a)
          ! interpolator(a).put
         end

         ! Spherical atoms obtained
         if (eps<TOL(6)) exit
         if (iteration>=1) exit

      end

      ! Footer
      stdout.dash(int_fields=1,real_fields=1)

      ! Copy atom interpolators. Leaky
      do a = 1,.n_atom
         nullify(.atom(a).interpolator)
         .atom(a).interpolator.create_copy(interpolator(a))
      end

      ! Clean up
      rho_av.destroy
      interpolator.destroy

   end

   make_averaged_BDAs(rho_av,eps,a,interpolator,l_max)
   ! Make the spherically averaged Hirshfeld atom density "rho_av" for
   ! the atom with index "a". Also return "eps", the maximum
   ! difference between the rho_av values and those stored in the
   ! interpolator data_values. The spacing and radial data values from
   ! the center of atom "a" are taken from the "interpolator". "l_max"
   ! is the maximum l value for the lebedev angular integration grid
      rho_av :: VEC{REAL}, OUT
      eps :: REAL, OUT
      a,l_max :: INT, IN
      interpolator :: INTERPOLATOR

   ENSURE(.basis_info_made,"no basis info")
   ENSURE(.atom.associated,"no atom list")
   ENSURE(.atom(1).interpolators_made,"No interpolators")
   ENSURE(rho_av.dim==interpolator.n_data,"wrong size, rho_av")
   ENSURE(a.is_in_range([1,.n_atom]),"a out of range")

      pt :: MAT{REAL}*
      rho,Wa, del,pc :: VEC{REAL}*
      pos :: VEC{REAL}(3)
      old,r :: REAL
      n_pts,n,i :: INT
      lebedev :: LEBEDEV*

      ! Set the spherical grid
      lebedev.create
      lebedev.set_l(l_max)

      ! No of quadrature points (on sphere)
      n_pts = lebedev.n_points

      ! Weight function, molecular density, spherical points
      ! and weights
      Wa.create(n_pts)
      rho.create(n_pts)
      pt.create(n_pts,3)

      del.create(interpolator.n_data)
      pc.create(interpolator.n_data)

      ! Atom position
      pos = .atom(a).position

      ! Maximum relative difference
      eps = ZERO

      stdout.show("atom =",a)
      interpolator.put

    ! stdout.put("r")
    ! stdout.put("rho_av")
    ! stdout.put("old")
    ! stdout.put("%")
    ! stdout.flush

      ! Loop over radial values
      do i = 1,interpolator.n_data

         ! Table value r
         r = interpolator.data_point(i)

         ! Interpolator data valie
         old = interpolator.data_value(i)

         ! Convert to actual r?
         if (interpolator.domain_is_sqrt_x1x) &
            r = sqrt(r/(1-r))*interpolator.domain_scale_factor

         ! For each r, make a spherical shell of points
         do n = 1,n_pts
            pt(n,1) = pos(1) + r*lebedev.point(n,1)
            pt(n,2) = pos(2) + r*lebedev.point(n,2)
            pt(n,3) = pos(3) + r*lebedev.point(n,3)
         end

         ! Weight function for atom a on the spherical shell
         .GRID:make_bond_density_atom_grid(Wa,pt,a)

         ! Weighted Hirshfeld atom density on shell
         Wa  = Wa*lebedev.weight

         ! Averaged value
         rho_av(i) = VEC{REAL}:sum_elements(Wa)

         ! Average percentage change
         eps = max(eps,abs((rho_av(i)-old)))
         del(i) = rho_av(i)-old
         pc(i)  = del(i)/old

    ! stdout.put(r)
    ! stdout.put(rho_av(i))
    ! stdout.put(old)
    ! stdout.put(pc)
    ! stdout.flush

      end

      stdout.text("del:")
      stdout.put(del)

      stdout.text("pc:")
      stdout.put(pc)

      ! Clean up
      pc.destroy; del.destroy
      pt.destroy; rho.destroy; Wa.destroy
      lebedev.destroy

   end

   put_BDA_charges
   ! Put the BDA charges.
   ENSURE(.basis_info_made,"no basis info")
   ENSURE(.atom.associated,"no atom list")

      bond :: VEC{VEC_{INT}}*
      bond_charge :: VEC{VEC_{REAL}}*
      label :: STR
      a,b,c :: INT
      has_bond :: BIN

      ! Make the charges
      .:make_BDA_charges(bond,bond_charge)

      ! Put the table
      stdout.dash(real_fields=3)
      stdout.tab(real_fields=1)
      stdout.put("Bonded")
      stdout.put("Bond")
      stdout.flush
      stdout.put("Atom")
      stdout.put("Atom")
      stdout.put("Charge")
      stdout.flush
      stdout.dash(real_fields=3)

      do a = 1,.n_atom

         label = trim(.atom(a).label) // "(" // trim(a.to_str) // ")"
         stdout.put(label)

         has_bond = bond(a).element.associated
         if (has_bond) has_bond = bond(a).element.dim>0

         if (NOT has_bond) then
            stdout.flush
         else

            do b = 1,bond(a).element.dim
               if (b>1) stdout.tab(real_fields=1)
               c = bond(a).element(b)
               label = trim(.atom(c).label) // "(" // trim(c.to_str) // ")"
               stdout.put(label)
               stdout.put(-bond_charge(a).element(b))
               stdout.flush
            end
            stdout.tab(real_fields=2)
            stdout.put(-VEC{REAL}:sum_elements(bond_charge(a).element))
            stdout.flush

         end

      end

      stdout.dash(real_fields=3)

      ! Clean up
      bond.destroy
      bond_charge.destroy

   end

   make_BDA_charges(bond,bond_charge) ::: leaky
   ! make the bond density atom charges.
      self :: INOUT
      bond :: VEC{VEC_{INT}}*
      bond_charge :: VEC{VEC_{REAL}}*

   ENSURE(.basis_info_made,"no basis info")
   ENSURE(.atom.associated,"no atom list")

      pt :: MAT{REAL}*
      wt,rho_aba,def_density_grid :: VEC{REAL}*
      bond_density_atom :: VEC{INT}*
      n_pt,a,b :: INT
      val :: REAL

      ! Set up grids, atomic densities, and NO's
      .SCF:make_Hirshfeld_inputs

      ! Array for bonds and bond charges
      bond.create(.n_atom)
      bond_charge.create(.n_atom)

      ! Loop over atoms, a
      do a = 1,.n_atom

         ! Make becke grid
         .becke_grid.make_grid(pt,wt,[a])
         n_pt = pt.dim1

         ! Deformation density on grid
         def_density_grid.create(n_pt)
         .GRID:make_deformation_density_grid(def_density_grid,pt)

         ! Bond density on grid
         rho_aba.create(n_pt)

         ! bond density atom
         bond_density_atom.create(3)
         bond_density_atom(1) = a
         bond_density_atom(3) = a

         ! Loop over atoms b, bonded to a
         do b = 1,.n_atom

            if (a==b) cycle
            if (NOT .atom.bonded(a,b)) cycle

            ! Get the bond density
            bond_density_atom(2) = b
            .GRID:make_def_bond_density_grid(rho_aba,pt,bond_density_atom,def_density_grid)

            ! Get weighted integral
            rho_aba  = rho_aba*wt

            ! Get charge
            val = VEC{REAL}:sum_elements(rho_aba)

            ! Store charge
            bond(a).element.append(b)
            bond_charge(a).element.append(val)

         end

         ! Clean up
         bond_density_atom.destroy
         rho_aba.destroy
         def_density_grid.destroy
         pt.destroy
         wt.destroy

      end

   end

!  =======================================
!  Scaled and derivative stockholder grids
!  =======================================

   make_scaled_stockholder_derivs(G,H,kappa,delta,skip_NOs)
   ! Make the scaled stockholder atom derivatives "G" and hessian "H"
   ! for used in a Newton-Raphson procedure to find the best scale
   ! factors.
      self :: INOUT
      G :: VEC{REAL}, OUT
      H :: MAT{REAL}, OUT
      kappa :: VEC{REAL}, IN
      delta :: REAL, OUT
      skip_NOs :: BIN, optional, IN

   ENSURE(.basis_info_made,"no basis info")
   ENSURE(.atom.associated,"no atom list")
   ENSURE(.molecular_orbitals.associated, "no MO's")
   ENSURE(.molecular_orbitals.restricted.associated, "no restricted MO's")
   ENSURE(.becke_grid.associated,"no becke_grid")
   ENSURE(.becke_grid.finalized,"no finalized becke_grid")
   ENSURE(H.is_square,"H is not square")
   ENSURE(G.dim==H.dim1,"G and H are inconsistent")

      Wa_cd :: MAT3{REAL}*
      pt,Wa_c :: MAT{REAL}*
      wt,Wa,G_grid,K_grid,Ga :: VEC{REAL}*
      delta2 :: REAL
      a,c,d,n_pt :: INT

      ! Set up grids, spherical atomic densities, and NO's
      .SCF:make_Hirshfeld_inputs(skip_NOs)

      ! Make the stockholder derivatives D and H
      delta = ZERO
      G = ZERO
      H = ZERO
      do a = 1,.n_atom

         ! Make integration grids
         .becke_grid.make_grid(pt,wt,[a])
         n_pt = pt.dim1

         ! Make G and K kinetic densities
         G_grid.create(n_pt)
         K_grid.create(n_pt)
         .GRID:make_G_and_K_kinetic_grids(G_grid,K_grid,pt)

         ! Make Hirshfeld atoms
         Wa.create(n_pt)
         .:make_stockholder_atom_grid(Wa,a,kappa,pt)

         ! Make delta kinetic grid
         G_grid = (G_grid - K_grid)*wt
         delta2 = TWO*VEC{REAL}:sum_elements(G_grid*Wa)
         delta  = delta + QUARTER*delta2*delta2
         Wa.destroy
         K_grid.destroy

         ! Stockholder 1st derivatives
         Ga.create(.n_atom)
         Wa_c.create(n_pt,.n_atom)
         .:make_d_stockholder_atom_grid(Wa_c,a,kappa,pt)
         do c = 1,.n_atom
            Ga(c) = VEC{REAL}:sum_elements(Wa_c(:,c)*G_grid)
         end
         Wa_c.destroy

         ! Add contribution from 1st derivatives
         G = G + delta2*Ga
         H.plus_outer_product_of(Ga,TWO)
         Ga.destroy

         ! Stockholder 2nd derivatives
         Wa_cd.create(n_pt,.n_atom,.n_atom)
         .:make_d2_stockholder_atom_grid(Wa_cd,a,kappa,pt)

         ! Add contribution from 2nd derivatives
         G_grid = delta2*G_grid
         do c = 1,.n_atom
         do d = 1,.n_atom
            H(c,d) = H(c,d) + VEC{REAL}:sum_elements(Wa_cd(:,c,d)*G_grid)
         end
         end
         Wa_cd.destroy

         ! Clean
         G_grid.destroy
         wt.destroy
         pt.destroy

      end

      delta = sqrt(delta)

   end

   make_stockholder_atom_grid(grid,a,kappa,pt)
   ! Make the scaled stockholder desity "grid" for the atom with index
   ! "a" and with scale parameters "kappa" using supplied points "pt".
   ! This uses gaussian atomic densities.
      self :: IN
      grid :: VEC{REAL}, OUT
      a  :: INT, IN
      kappa :: VEC{REAL}, IN
      pt :: MAT{REAL}, IN

   ENSURE(.atom.associated,"no atoms")
   ENSURE(.atom.has_interpolators_any_kind,"missing atomic interpolators")
   ENSURE(grid.dim==pt.dim1,"wrong size, grid")
   ENSURE(kappa.dim==.n_atom,"wrong size, kappa")
      rho_a :: VEC{REAL}*
      n_pt,i :: INT

      ! Allocate temporary densities
      n_pt = grid.dim
      rho_a.create(n_pt)

      ! Make density for atom "a"
      .atom(a).make_density_grid(rho_a,pt)

      ! Make total density in "grid"
      grid = kappa(a)*rho_a
      do i = 1,.n_atom
        if (i==a) cycle
        .atom(i).add_density_grid(grid,pt,kappa(i))
      end

      ! Make the stockholder weight
      do i = 1,n_pt
       if (grid(i)>epsilon(ONE)) then; grid(i) = rho_a(i)/grid(i)
       else;                           grid(i) = ZERO
       end
      end
      rho_a.destroy

   end

   make_d_stockholder_atom_grid(grid,a,kappa,pt)
   ! Make the derivative scaled stockholder desity "grid" for the atom
   ! with index "a" and with scale parameters "kappa" using supplied
   ! points "pt".  This uses gaussian atomic densities.
      self :: IN
      grid :: MAT{REAL}, OUT
      a  :: INT, IN
      kappa :: VEC{REAL}, IN
      pt :: MAT{REAL}, IN

   ENSURE(.atom.associated,"no atoms")
   ENSURE(.atom.has_interpolators_any_kind,"missing atomic interpolators")
   ENSURE(grid.dim1==pt.dim1,"wrong dim1, grid")
   ENSURE(grid.dim2==.n_atom,"wrong dim2, grid")
   ENSURE(kappa.dim==.n_atom,"wrong size, kappa")

      rho_a,rho_c,rho :: VEC{REAL}*
      n_pt,i,c :: INT

      ! Allocate temporary densities
      n_pt = grid.dim1
      rho_a.create(n_pt)
      rho_c.create(n_pt)
      rho.create(n_pt)

      ! Make density for atom "a"
      .atom(a).make_density_grid(rho_a,pt)

      ! Make total density in "rho" with kappa factors
      rho_a = kappa(a)*rho_a
      rho = rho_a
      do i = 1,.n_atom
        if (i==a) cycle
        .atom(i).add_density_grid(rho,pt,kappa(i))
      end

      where (rho>epsilon(ONE)); rho_a = rho_a/(rho*rho)
      elsewhere;                rho_a = ZERO
      end

      ! Make the derivative stockholder weight
      do c = 1,.n_atom

        .atom(c).make_density_grid(rho_c,pt)

        grid(:,c) = -rho_a*rho_c

        if (c/=a) cycle
        where (rho>epsilon(ONE)) grid(:,c) = grid(:,c) + rho_c/rho

      end

      ! Clean
      rho.destroy
      rho_c.destroy; rho_a.destroy

   end

   make_d2_stockholder_atom_grid(grid,a,kappa,pt)
   ! Make the 2nd derivative scaled stockholder desity "grid" for the
   ! atom with index "a" and with scale parameters "kappa" using
   ! supplied points "pt".  This uses gaussian atomic densities.
      self :: IN
      grid :: MAT3{REAL}, OUT
      a  :: INT, IN
      kappa :: VEC{REAL}, IN
      pt :: MAT{REAL}, IN

   ENSURE(.atom.associated,"no atoms")
   ENSURE(.atom.has_interpolators_any_kind,"missing atomic interpolators")
   ENSURE(grid.dim1==pt.dim1,"wrong dim1, grid")
   ENSURE(grid.dim2==.n_atom,"wrong dim2, grid")
   ENSURE(grid.dim3==.n_atom,"wrong dim3, grid")
   ENSURE(kappa.dim==.n_atom,"wrong size, kappa")

      rho_a,rho_c,rho_d,rho :: VEC{REAL}*
      n_pt,i,c,d :: INT

      ! Allocate temporary densities
      n_pt = grid.dim1
      rho_a.create(n_pt)
      rho_c.create(n_pt)
      rho_d.create(n_pt)
      rho.create(n_pt)

      ! Make density for atom "a"
      .atom(a).make_density_grid(rho_a,pt)

      ! Make total density in "rho" with kappa factors
      rho_a = kappa(a)*rho_a
      rho = rho_a
      do i = 1,.n_atom
        if (i==a) cycle
        .atom(i).add_density_grid(rho,pt,kappa(i))
      end

      where (rho>epsilon(ONE)); rho_a = TWO*rho_a/(rho*rho*rho)
      elsewhere;                rho_a = ZERO
      end

      where (rho>epsilon(ONE)); rho = ONE/(rho*rho)
      elsewhere;                rho = ZERO
      end

      ! Make the derivative stockholder weight
      do c = 1,.n_atom

        .atom(c).make_density_grid(rho_c,pt)

        do d = 1,.n_atom

           .atom(d).make_density_grid(rho_d,pt)

           grid(:,c,d) =  rho_a*rho_c*rho_d

           if (c==a) grid(:,c,d) = grid(:,c,d) - rho_d*rho
           if (d==a) grid(:,c,d) = grid(:,c,d) - rho_c*rho

        end

      end

      ! Clean
      rho.destroy
      rho_d.destroy; rho_c.destroy; rho_a.destroy

   end

end
