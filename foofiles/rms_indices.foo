!-------------------------------------------------------------------------------
!
! RMS_INDICES
!
! This object is used to store precalculated information pertaining to the
! reduced multiplication scheme (RMS) used in electron repulsion integral 
! evaluation.
!
! Copyright (C) Dylan Jayatilaka, 2000
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!-------------------------------------------------------------------------------

module RMS_INDICES

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create ::: get_from(OBJECT), leaky, PURE
   ! Allocate an object
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

!  ===========
!  Set methods
!  ===========

   set_indices(nx,ny,nz,px,py,pz) ::: leaky
   ! Make the arrays which tell where the powers are zero, and where the product
   ! of the first two factors is repeated, and where they are not. These arrays
   ! are used to reduce work in the multiplication of the 2d integrals to form
   ! the full ERI's.
      nx,ny,nz :: VEC{INT}, IN
      px,py,pz :: VEC{INT}, IN

   ENSURE(ny.dim==nx.dim,"wrong size ny")
   ENSURE(nz.dim==nx.dim,"wrong size nz")

      n,i,ixyz,ixy,ixz,iyz,ix,iy,iz,in,ia,ir, n1,n2,j,k,l,m :: INT
      listn,lista :: VEC{STR}@

      n = nx.dim
      .xyz0.create(n)               ! Set where the arrays are 0 (actually 1)
      .xy0.create(n)  
      .xz0.create(n)
      .yz0.create(n)
      .x0.create(n)
      .y0.create(n)
      .z0.create(n)
      .n0.create(n)
      .a0.create(n)
      listn.create(n)
      lista.create(n)

      listn = " "
      lista = " "
      ixyz = 0
      ixy  = 0
      ixz  = 0
      iyz  = 0
      ix   = 0
      iy   = 0
      iz   = 0
      in   = 0
      ia   = 0

      do i = 1,n
        if      (nx(i)==1 AND ny(i)==1 AND nz(i)==1) then; ixyz = ixyz + 1; .xyz0(ixyz) = i
        else if (ny(i)==1 AND nz(i)==1) then;              iyz  = iyz  + 1; .yz0(iyz) = i
        else if (nx(i)==1 AND nz(i)==1) then;              ixz  = ixz  + 1; .xz0(ixz) = i
        else if (nx(i)==1 AND ny(i)==1) then;              ixy  = ixy  + 1; .xy0(ixy) = i
        else if (nz(i)==1) then;                           iz   = iz   + 1;  .z0(iz)  = i
        else if (ny(i)==1) then;                           iy   = iy   + 1;  .y0(iy)  = i
        else if (nx(i)==1) then;                           ix   = ix   + 1;  .x0(ix)  = i
        else;                                              in   = in   + 1;  .n0(in)  = i
                listn(in) = trim(nx(i).to_str)//" "//trim(ny(i).to_str)
        end
        if      (nx(i)==1 OR  ny(i)==1 OR  nz(i)==1) then; ia   = ia   + 1;  .a0(ia) = i
                lista(ia) = trim(nx(i).to_str)//" "//trim(ny(i).to_str)
        end
      end

      .xyz0.shrink(ixyz)
      .xy0.shrink(ixy)
      .xz0.shrink(ixz)
      .yz0.shrink(iyz)
      .x0.shrink(ix)
      .y0.shrink(iy)
      .z0.shrink(iz)
      .n0.shrink(in)
      .a0.shrink(ia)
      listn.shrink(in)
      lista.shrink(ia)

      ! Locate the reduced multiplies
      .xy_rms_n.repetitions_in(listn) ! RMS for terms with non-zero indices
      .xy_rms_a.repetitions_in(lista) ! RMS with at least one zero index

   ! stdout.show("n = ",n)
   ! stdout.show("l_min = ",l_min)
   ! stdout.show("l_max = ",l_max)
   ! stdout.text("nn:")
   ! do i = 1,n
   !    stdout.put(i)
   !    stdout.put(nx(i))
   !    stdout.put(ny(i))
   !    stdout.put(nz(i))
   !    stdout.flush
   ! end
   ! stdout.text("n0:")
   ! stdout.put(.n0,"column")
   ! stdout.text("xy_rms_n:")
   ! do i = 1,.xy_rms_n.dim
   !    stdout.put(.xy_rms_n(i).element,"row")
   !    stdout.flush
   ! end
   ! stdout.text("a0:")
   ! stdout.put(.a0,"column")
   ! stdout.text("xy_rms_a:")
   ! do i = 1,.xy_rms_a.dim
   !    stdout.put(.xy_rms_a(i).element,"row")
   !    stdout.flush
   ! end

      .yz0px.create(iyz)
      do i = 1,iyz
        .yz0px(i) = px(.yz0(i))
      end
      .xz0py.create(ixz)
      do i = 1,ixz
        .xz0py(i) = py(.xz0(i))
      end
      .xy0pz.create(ixy)
      do i = 1,ixy
        .xy0pz(i) = pz(.xy0(i))
      end
      .z0px.create(iz)
      .z0py.create(iz)
      do i = 1,iz
        .z0px(i) = px(.z0(i))
        .z0py(i) = py(.z0(i))
      end
      .y0px.create(iy)
      .y0pz.create(iy)
      do i = 1,iy
        .y0px(i) = px(.y0(i))
        .y0pz(i) = pz(.y0(i))
      end
      .x0py.create(ix)
      .x0pz.create(ix)
      do i = 1,ix
        .x0py(i) = py(.x0(i))
        .x0pz(i) = pz(.x0(i))
      end

      ! Count number of rms's without any reduction
      ir = .xy_rms_n.dim
      n1 = 0
      n2 = 0
      do i = 1,ir
        if(.xy_rms_n(i).element.dim==1) n1 = n1 + 1
        if(.xy_rms_n(i).element.dim> 1) n2 = n2 + 1
      end
      DIE_IF(ir/=n1+n2,"inconsistent n1 and n2")

      .n1.create(n1)
      .n1px.create(n1)
      .n1py.create(n1)
      .n1pz.create(n1)
      j = 0
      do i = 1,ir
        if(.xy_rms_n(i).element.dim>1) cycle
        DIE_IF(.xy_rms_n(i).element.dim<1,"xy_rms_n has zero element component") 
        j = j + 1
        m = .xy_rms_n(i)[1]
        .n1(j)   = .n0(m)
        .n1px(j) = px(.n1(j))
        .n1py(j) = py(.n1(j))
        .n1pz(j) = pz(.n1(j))
      end

      .n2.create(n2)
      .n2px.create(n2)
      .n2py.create(n2)
      .n2pz.create(n2)
      j = 0
      do i = 1,ir
        if(.xy_rms_n(i).element.dim==1) cycle
        DIE_IF(.xy_rms_n(i).element.dim<1,"xy_rms_n has zero element component") 
        j = j + 1
        l = .xy_rms_n(i).element.dim
        .n2(j).element.create(l)
        .n2px(j).element.create(l)
        .n2py(j).element.create(l)
        .n2pz(j).element.create(l)
        do k = 1,l
           m = .xy_rms_n(i)[k]
           .n2(j)[k]   = .n0(m)
           .n2px(j)[k] = px(.n2(j)[k])
           .n2py(j)[k] = py(.n2(j)[k])
           .n2pz(j)[k] = pz(.n2(j)[k])
        end    
      end

   end

end
