!---------------------------------------------------------------------------
!
! VEC{MAT_{INTRINSIC}}: Vector of matrices
!
! Copyright (C) Daniel Grimwood, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

virtual module VEC{MAT_{INTRINSIC}}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: leaky, PURE
   ! Allocate vector with dimension "dim"
      self :: allocatable, OUT
      dim :: INT, IN

   ENSURE(dim>=0, "array dimension is -ve, dim = "//trim(INT:to_str(dim)))

      .create(1,dim)

   end

   create(lb,ub) ::: leaky, PURE
   ! Allocate the vector with lower bound "lb", upper bound "ub"
      self :: allocatable, OUT
      lb,ub :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(lb:ub),stat=status)
      ENSURE(status==0,"error in allocating memory")
      if (status/=0) stop
#else
      allocate(self(lb:ub))
#endif

   end

   create(dim,dim1,dim2) ::: leaky, PURE
   ! Allocate a vector of matrices with primary dimension "dim" and
   ! secondary dimensions "dim1" and "dim2"
      self :: allocatable, OUT
      dim,dim1,dim2 :: INT, IN

      .create(dim)
      .create_mat(dim1,dim2)

   end

   destroy ::: leaky, PURE
   ! Deallocate the vector
      self :: allocatable, OUT

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

      if (.deallocated) return

#ifdef USE_PRECONDITIONS
      deallocate(self,stat=status)
      ENSURE(status==0,"error in deallocating memory")
      if (status/=0) stop
#else
      deallocate(self)
#endif

   end


   create_mat(dim1,dim2) ::: leaky, PURE
   ! Allocate the matrix part
      self :: INOUT
      dim1,dim2 :: INT, IN

      i :: INT

      do i = 1,.dim
         self(i).element.create(dim1,dim2)
      end

   end

end
