!---------------------------------------------------------------------------
!
! VEC{MAT_{INTRINSIC}}: Vector of matrices
!
! Copyright (C) Daniel Grimwood, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id:$
!---------------------------------------------------------------------------

virtual module VEC{MAT_{INTRINSIC}}

   implicit none

contains

   create(dim) ::: leaky, PURE
   ! Create the object
      self :: PTR
      dim :: INT, IN

      status :: INT

      nullify(self)

      allocate(self(dim),STAT=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

      .nullify_ptr_part

   end

   create(lb,ub) ::: leaky, PURE
   ! Create the object with specified bounds
      self :: PTR
      lb,ub :: INT, IN

      status :: INT

      nullify(self)

      allocate(self(lb:ub),STAT=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

      self(lb:ub).nullify_ptr_part

   end

   create(dim,dim1,dim2) ::: leaky, PURE
   ! Create space for a vector of matrices
      self :: PTR
      dim,dim1,dim2 :: INT, IN

      status :: INT

      nullify(self)

      allocate(self(dim),STAT=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

      .nullify_ptr_part
      .create_mat(dim1,dim2)

   end

   create_mat(dim1,dim2) ::: leaky, PURE
   ! Allocate the pointer parts
      self :: INOUT
      dim1,dim2 :: INT, IN

      i :: INT

      do i = 1,.dim
         self(i).element.create(dim1,dim2)
      end

   end

   destroy ::: leaky, PURE
   ! Destroy the object
      self :: PTR

      status :: INT

      if (.destroyed) return

      .destroy_ptr_part

      deallocate(self,stat=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

   end

   nullify_ptr_part ::: pure
   ! Nullify the pointer parts of a matvec
      self :: INOUT

      i,lb,ub :: INT

      lb = lbound(self,dim=1)
      ub = ubound(self,dim=1)

      do i = lb,ub
         nullify(self(i).element)
      end

   end

   destroy_ptr_part ::: leaky, PURE
   ! Destroy the pointer parts of a matvec
      self :: PTR

      i,lb,ub :: INT

      lb = lbound(self,dim=1)
      ub = ubound(self,dim=1)

      do i = lb,ub
         self(i).element.destroy
      end

   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
   end

   create_copy(m) ::: leaky, PURE
   ! Create a copy of "m"
      self :: PTR
      m :: VEC{MAT_{INTRINSIC}}, IN

      .create(m.dim)
      .copy(m)

   end

   copy(m) ::: leaky, PURE
   ! Make a copy of "m"
      self :: INOUT
      m :: VEC{MAT_{INTRINSIC}}, IN

      i :: INT

      .nullify_ptr_part

      do i = 1,m.dim
         if (m(i).element.destroyed) cycle
         self(i).element.create_copy(m(i).element)
      end

   end

end
