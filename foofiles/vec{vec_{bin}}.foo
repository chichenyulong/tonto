!---------------------------------------------------------------------------
!
! VEC{VEC_{BIN}} : a list of vectors, or a matrix where each column is
! (possibly) a different length
!
! Copyright (C) Dylan Jayatilaka, 2006
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module VEC{VEC_{BIN}}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate vector with dimension "dim"
   end

   create(dim,dimv) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate a vector of vectors with primary dimension "dim" and
   ! secondary dimension "dimv"
   end

   create(dim,bounds2) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate a vector of vectors with non-standard secondary "bounds2"
   end

   create(bounds1) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate a vector of vectors with non-standard primary "bounds1"
   end

   create(bounds1,bounds2) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate a vector of vectors with non-standard primary "bounds1"
   ! and secondary "bounds2"
   end

   destroy ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Deallocate the vector
   end

   create_vec(dimv) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate the array part
   end

   create_vec(bounds) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate the array part
   end

!  ==================
!  Size-of operations
!  ==================

   size result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo
   ! Return the size of the array
   end

   dim result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo
   ! Return the size of the 1st dimension
   end

   max_element_dim result (res) ::: get_from(VEC{VEC_{INTRINSIC}}), pure
   ! Return the maximum element dimension
   end

!  =======================
!  Shrinking and expansion
!  =======================

   shrink(dim) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Shrink allocatable "self" to dimension "dim" from the end.
   ! Contents are retained. 
   end

   expand(dim) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Expand allocatable "self" to dimension "dim" from the end. 
   end

   append(v) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Append the contents of vector "v" to allocatable "self".
   end

   append(value) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Appends the scalar "value" onto the end of allocatable "self".
   end

   append(value) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Extend self and append the vector "value" as the element part.
   end

   append_listed_to(res,list) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Append together (i.e. concatenate) the vectors in self whose
   ! indices are listed in "list".
   end

   prepend(v) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Prepend vector "v" to allocatable "self".
   end

   prepend(value) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Prepend a single "value" to allocatable "self".
   end

   prune_element(k) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Removes the element at position "k" from allocatable "self".
   ! Elements after that position are moved downward.
   end

end
