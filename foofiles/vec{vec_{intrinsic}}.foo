!---------------------------------------------------------------------------
!
! VEC{VEC_{INTRINSIC}} : an array of elements each of which is 
! a vector of intrinsic elements, possible of different length
!
! Copyright (C) Daniel Grimwood, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

virtual module VEC{VEC_{INTRINSIC}}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: leaky, PURE
   ! Allocate vector with dimension "dim"
      self :: allocatable, OUT
      dim :: INT, IN

   ENSURE(dim>=0, "array dimension is -ve, dim = "//trim(INT:to_str(dim)))

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(dim),stat=status)
      ENSURE(status==0,"error in allocating memory")
      if (status/=0) stop
#else
      allocate(self(dim))
#endif

   end

   create(dim,dimv) ::: leaky, PURE
   ! Allocate a vector of vectors with primary dimension "dim" and
   ! secondary dimension "dimv"
      self :: allocatable, OUT
      dim,dimv :: INT, IN

      .create(dim)
      .create_vec(dimv)

   end

   create(dim,bounds2) ::: leaky, PURE
   ! Allocate a vector of vectors with non-standard secondary "bounds2"
      self :: allocatable, OUT
      dim :: INT, IN
      bounds2 :: VEC{INT}(2), IN

      .create(dim)
      .create_vec(bounds2)

   end

   create(bounds1) ::: leaky, PURE
   ! Allocate a vector of vectors with non-standard primary "bounds1"
      self :: allocatable, OUT
      bounds1 :: VEC{INT}(2), IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(bounds1(1):bounds1(2)),STAT=status)
      ENSURE(status==0,"error in deallocating memory")
      if (status/=0) stop
#else
      allocate(self(bounds1(1):bounds1(2)))
#endif

   end

   create(bounds1,bounds2) ::: leaky, PURE
   ! Allocate a vector of vectors with non-standard primary "bounds1"
   ! and secondary "bounds2"
      self :: allocatable, OUT
      bounds1,bounds2 :: VEC{INT}(2), IN

      .create(bounds1)
      .create_vec(bounds2)

   end

   destroy ::: leaky, PURE
   ! Deallocate the vector
      self :: allocatable, OUT

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

      if (.deallocated) return

#ifdef USE_PRECONDITIONS
      deallocate(self,stat=status)
      ENSURE(status==0,"error in deallocating memory")
      if (status/=0) stop
#else
      deallocate(self)
#endif

   end

   create_vec(dimv) ::: leaky, PURE
   ! Allocate the array part
      self :: INOUT
      dimv :: INT, IN

      i :: INT

      do i = 1,.dim
         self(i).element.create(dimv)
      end

   end

   create_vec(bounds) ::: leaky, PURE
   ! Allocate the array part
      self :: INOUT
      bounds :: VEC{INT}(2), IN

      i :: INT

      do i = 1,.dim
         self(i).element.create(bounds)
      end

   end

!  ==================
!  Size-of operations
!  ==================

   size result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo
   ! Return the size of the array
   end

   dim result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo
   ! Return the size of the 1st dimension
   end

   max_element_dim result (res) ::: pure
   ! Return the maximum element dimension
      self :: IN
      res :: INT

      s :: INT

      res = 0

      do s = 1,.dim
         res = max(res,self(s).element.dim)
      end

   end

!  =======================
!  Shrinking and expansion
!  =======================

   shrink(dim) ::: leaky, PURE
   ! Shrink allocatable "self" to dimension "dim" from the end.
   ! Contents are retained. 
      self :: allocatable, INOUT
      dim :: INT, IN

   ENSURE(.allocated,"no self array")
   ENSURE(dim<.dim,"dim too large")
   ENSURE(dim>0, "dim is not +ve")

      lb :: INT
      old :: VEC{VEC_{INTRINSIC}}@

      ! Bounds
      lb = lbound(self,dim=1)

      ! Save
      old = self

      ! Shrink
      self.destroy
      self.create([lb,lb+dim-1])

      ! Copy
      self(lb:) = old(lb:lb+dim-1)

   end

   expand(dim) ::: leaky, PURE
   ! Expand allocatable "self" to dimension "dim" from the end. 
      self :: allocatable, INOUT
      dim :: INT, IN

      lb,ub :: INT
      old :: VEC{VEC_{INTRINSIC}}@

      if (.deallocated) then

         .create(dim)

      else

         ENSURE(dim>.dim, "dim not large enough")
         ENSURE(dim>0, "dim is not +ve")
        
         ! Bounds
         lb = lbound(self,dim=1)
         ub = ubound(self,dim=1)

         ! Save
         old = self

         ! Grow it
         self.destroy
         self.create([lb,lb+dim-1])

         ! Copy
         self(lb:ub) = old(lb:ub)
        
      end

   end

   append(v) ::: leaky, pure
   ! Append the contents of vector "v" to allocatable "self".
      self :: allocatable, INOUT
      v :: VEC{VEC_{INTRINSIC}}, IN

      if (self.deallocated) then
         self = v
      else
         self = [ self, v ]
      end

   end

   append(v1,v2) ::: leaky, pure
   ! Appends vectors "v1" and "v2" to allocatable "self".
      self :: allocatable, INOUT
      v1,v2 :: VEC{VEC_{INTRINSIC}}, IN

      if (self.deallocated) then
         self = [ v1, v2 ]
      else
         self = [ self, v1, v2 ]
      end

   end

   append(value) ::: leaky, pure
   ! Appends the scalar "value" onto the end of allocatable "self".
      self :: allocatable, INOUT
      value :: VEC_{INTRINSIC}, IN

      if (self.deallocated) then
         self = [ value ]
      else
         self = [ self, value ]
      end

   end

   append(value) ::: leaky, pure
   ! Extend self and append the vector "value" as the element part.
      self :: allocatable, INOUT
      value :: VEC{INTRINSIC}, IN

      dim :: INT

      if (self.deallocated) then

         self.create(1)
         self(1).element = value
      
      else

         dim = .dim
         self.expand(1)
         self(dim+1).element = value

      end

   end

   append_fifo(value,length) ::: leaky, pure
   ! Expands self and insert "value"; if equal to "length", push the
   ! first/oldest vectors down/up the list
      self :: allocatable, INOUT
      length :: INT, IN
      value :: VEC{INTRINSIC}, IN

      i,dim :: INT

      if (.deallocated) then; dim = 0
      else;                   dim = .dim
      end

      if (dim==length) then

         ! Move down & add to end
         do i = 1,length-1
            self(i).element = self(i+1).element
         end do
         self(length).element = value

      else

         ! Expand by one and add
         .expand(dim+1)
         self(dim+1).element = value

      end

   end

   append_listed_to(res,list) ::: leaky, PURE
   ! Append together (i.e. concatenate) the vectors in self whose
   ! indices are listed in "list".
      self :: IN
      list :: VEC{INT}, IN
      res :: VEC{VEC_{INTRINSIC}}@, OUT

   ENSURE(list.dim>=1,"list must not have zero dimension")
   ENSURE(maxval(list)<=.dim,"some elements of list are too large")
   ENSURE(minval(list)>=1,"list elements must be +ve")

      i,l :: INT

      l = list(1)
      res = self(l)

      do i = 2,list.dim
         l = list(i)
         res.append(self(l))
      end

   end

   prepend(v) ::: leaky, pure
   ! Prepend vector "v" to allocatable "self".
      self :: allocatable, INOUT
      v :: VEC{VEC_{INTRINSIC}}, IN

      if (self.deallocated) then
         self = [ v ]
      else
         self = [ v, self ]
      end

   end

   prepend(value) ::: leaky, pure
   ! Prepend a single "value" to allocatable "self".
      self :: allocatable, INOUT
      value :: VEC_{INTRINSIC}, IN

      if (self.deallocated) then
         self = [ value ]
      else
         self = [ value, self ]
      end

   end

   prune_element(k) ::: leaky, pure
   ! Removes the element at position "k" from allocatable "self".
   ! Elements after that position are moved downward.
      self :: allocatable, INOUT
      k :: INT, IN

      lb,ub :: INT

      lb = lbound(self,dim=1)
      ub = ubound(self,dim=1)

      self(lb:ub-1) = [ self(lb:k-1),self(k+1:ub) ]

   end

end

