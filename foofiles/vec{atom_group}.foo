!---------------------------------------------------------------------------
!
!  VEC{ATOM_GROUP}: a vector of ATOM_GROUPS
!
! Copyright (C) Dylan Jayatilaka, 2011
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module VEC{ATOM_GROUP}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate vector
   end

   destroy ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Deallocate the vector
   end

!  =========
!  Shrinking
!  =========

   shrink(dim,chop_start) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Shrink allocatable "self" to dimension "dim" from the end.
   ! Contents are retained. If "chop_start" is present and TRUE,
   ! "self" is chopped from the start, and the contents from the end
   ! are retained.
   end

   expand(dim,grow_start) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Expand allocatable "self" to dimension "dim" adding to the end.
   ! If "grow_start" is present and TRUE, then "self" is expanded from
   ! the start, keeping the same lower bound.
   end

   append(v) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Append the contents of vector "v" to allocatable "self".
   end

   append(value) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Appends the scalar "value" onto the end of allocatable "self".
   end

!  ===========
!  Set methods
!  ===========

   set_defaults ::: get_from(VEC{OBJECT}), PURE
   ! Set default values
   end

!  ============
!  I/O Routines
!  ============

   read_keywords ::: recursive, get_from(VEC{OBJECT}), leaky
   ! Read in and process normal (non list-type) keywords from "stdin",
   ! for allocatable arrays.
   end

   process_keyword(keyword) ::: leaky
   ! Process a normal (non list-type) "keyword".
      self :: allocatable
      keyword :: STR

      word :: STR

      word = keyword
      word.to_lower_case

      select case (word)
      case("}") ! do nothing.
      case("redirect"); .redirect
      case("revert  "); .revert
      case default;     UNKNOWN(word)
      end

   end


   read_list_keywords ::: recursive, get_from(VEC{OBJECT}), leaky
   ! Read in and process list-based keywords from "stdin",
   ! for allocatable arrays.
   end

   process_list_keyword(keyword) ::: get_from(VEC{OBJECT}), leaky
   ! Process a list-type "keyword". For allocatable arrays.
   end

   read_data ::: get_from(VEC{OBJECT}), leaky
   ! Repeatedly process keywords in "keys" on the data list from
   ! "stdin". Opening and closing braces needed. For allocatables.
   end

   read_data_sans_braces ::: get_from(VEC{OBJECT}), leaky
   ! Repeatedly process keywords in "keys" on the data list from
   ! "stdin". Opening and closing braces not needed. For allocatables.
   end

   data_length result (length) ::: get_from(VEC{OBJECT})
   ! Return the "length" of the data list from "stdin", by processing
   ! each keyword in "keys". The data must begin with the first data
   ! item, *not* a "{" symbol, and must be terminated by a "}" symbol. 
   ! For allocatable arrays.
   end

   read_altered_data ::: get_from(VEC{OBJECT}), leaky
   ! Read in from "stdin" indices of data list elements to alter data
   ! for, followed by the altered data list on which the keywords in
   ! "keys" are processed. For allocatable arrays.
   end

   read_append_data ::: get_from(VEC{OBJECT}), leaky
   ! Append data obtained by repeatedly process keywords in "keys" on
   ! the data list from "stdin". For allocatables.
   end

   process_keys ::: get_from(VEC{OBJECT}), leaky
   ! Process the keywords in "keys" on each element of the list,
   ! for allocatable arrays.
   end

   process_keys_once  ::: get_from(VEC{OBJECT}), leaky
   ! Process the keywords in "keys" just once on an anonymous data
   ! list. This is useful for setting global variables in the list
   ! module, e.g. the default order of lists *within* the list data.
   ! For allocatable arrays.
   end

   keys_created result (res) ::: get_from(VEC{OBJECT})
   ! Return TRUE if the list-element keys are created,
   ! for allocatable arrays.
   end

   set_keys(the_keys) ::: get_from(VEC{OBJECT}), leaky
   ! Setting the keywords in "keys" to "the_keys". For allocatables.
   end

   clear_keys ::: get_from(VEC{OBJECT}), leaky
   ! Destroy the keywords in the "keys" array. For allocatables.
   end

   read_keys ::: get_from(VEC{OBJECT}), leaky
   ! Read a new set of keywords into "keys". For allocatables.
   end


   redirect ::: get_from(OBJECT), leaky
   ! Redirect input
   end

   revert ::: get_from(OBJECT), leaky
   ! Revert back to previous stdin file
   end

   finalize(atom) ::: leaky
   ! Do all the sanity checks and default settings
      self :: INOUT
      atom :: VEC{ATOM}*

      g :: INT

      ! Finalize checks on each group
      do g = 1,.dim
         self(g).finalize(atom)
      end

   end

!  =======
!  Enquiry
!  =======

   has_all_mols_ptr result (res) ::: PURE
   ! True if all the mols files are defined
      self :: allocatable
      res :: BIN

      res = TRUE

      if (.allocated) res = .has_all_mols

   end

   has_all_mols result (res) ::: pure
   ! True if all the mols files are defined
      self :: IN
      res :: BIN

      g :: INT

      res = TRUE

      do g = 1,.dim

         res = associated(self(g)%mol)

         if (NOT res) exit

      end

   end

   has_wavefunction_files_ptr result (res) ::: PURE
   ! True if all the fchk files are defined
      self :: allocatable
      res :: BIN

      res = FALSE

      if (.allocated) res = .has_wavefunction_files

   end

   has_wavefunction_files result (res) ::: pure
   ! True if all the fchk files are defined
      self :: IN
      res :: BIN

      res = all(self.wavefunction_file_name /= " ")

   end

   has_MO_files_ptr result (res) ::: PURE
   ! True if all the MO files are defined
      self :: allocatable
      res :: BIN

      res = FALSE

      if (.allocated) res = .has_MO_files

   end

   has_MO_files result (res) ::: pure
   ! True if all the MO files are defined
      self :: IN
      res :: BIN

      res = all(self.MO_file_name /= " ")

   end

   has_atom_indices_ptr result (res) ::: PURE
   ! True if all the fchk files are defined
      self :: allocatable
      res :: BIN

      res = FALSE

      if (.allocated) res = .has_atom_indices

   end

   has_atom_indices result (res) ::: pure
   ! True if all the fchk files are defined
      self :: IN
      res :: BIN

      g :: INT

      res = FALSE

      do g = 1,.dim
         res = self(g).atom_index.allocated
         if (NOT res) exit
      end

   end

   atom_lists result (res) ::: leaky, PURE
   ! Produce a list of integer lists for each atom group.
   ! Useful for ROBY module.
      self :: IN
      res :: VEC{VEC_{INT}}@

      g :: INT

      res.create(.dim)

      do g = 1,.dim
         res(g).element = self(g).atom_index
      end

   end

   n_bf_up_to_mol(g) result (res) ::: PURE
   ! Return the no. of basis functions up to True if all the MO files are defined
      self :: IN
      g :: INT, IN
      res :: INT

   ENSURE(g>0 AND g<=self.dim,"group out of range")

      i :: INT

      res = 0
      do i = 1,g-1
         ENSURE(self(g).mol.associated,"no mol for group "//trim(g.to_str))
         res = res + self(i).mol.n_bf
      end

   end

!  ======
!  Output
!  ======

   put
   ! Output the atom group table
      self :: IN

      nm :: VEC{STR}*
      qq :: VEC{REAL}*
      na :: VEC{INT}*
      at :: VEC{VEC_{INT}}@
      table :: VEC{TABLE_COLUMN}@

      stdout.flush
      stdout.flush
      stdout.text("===========")
      stdout.text("Atom groups")
      stdout.text("===========")
      stdout.flush
      stdout.text("Atom groups are used to define submolecules on which")
      stdout.text("calculations can be made and analyzed and combined  ")
      stdout.text("back into the parent supermolecule.")
      stdout.flush
      stdout.show("No. of atom groups =",.dim)
      stdout.flush

      ! Data
      nm.create(.dim); nm = .name
      qq.create(.dim); qq = .charge
      na.create(.dim); na = .n_atoms
      at = self.atom_lists

      ! Table
      table.create(4)
      table(1).set_heading("Group");  table(1).set_values(nm)
      table(1).set_subhead("name")
      table(2).set_real_precision(2)
      table(2).set_heading("Charge"); table(2).set_values(qq)
      table(3).set_heading("No of");  table(3).set_values(na)
      table(3).set_subhead("atoms")
      table(4).set_heading("Atom");   table(4).set_values(at)
      table(4).set_subhead("list")
      table.put(label_rows=TRUE)

      ! Clean
      table.destroy
      at.destroy
      na.destroy
      qq.destroy
      nm.destroy

   end

end
