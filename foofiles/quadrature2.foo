!------------------------------------------------------------------------------
!
! QUADRATURE2:
!
! For integrating two dimensional functions using Gauss quadrature --- i.e.
! getting abscissas and weights based on orthogonal polynomial theory. The Gauss
! quadratures are based on the Numerical Recipes, pp. 144-149.
!
! This object contains an "x" and "y" quadrature object used for the x and y
! axis respectively. The actual quadrature grid constructed is the direct
! product of the individual axis grids.
!
! Copyright (C) Dylan Jayatilaka, 2004
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!------------------------------------------------------------------------------

module QUADRATURE2

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create ::: get_from(OBJECT), leaky
   ! Create an object
      self :: PTR
   end

   destroy ::: get_from(OBJECT), leaky
   ! Destroy an object
   end

   nullify_ptr_part
   ! Nullify the pointer parts
      nullify(.x)
      nullify(.y)
   end

   destroy_ptr_part ::: leaky
   ! Destroy the pointer parts
      .x.destroy
      .y.destroy
   end

   set_defaults 
   ! Set up a defaults
   end

!  ====
!  Copy
!  ====

   create_copy(object) ::: get_from(OBJECT), leaky
   ! Create a copy of object
   end

   copy(c) ::: leaky
   ! Copy the contents of "c" to self.
      c :: QUADRATURE2, IN
      self = c
      .nullify_ptr_part
      if (c.x.associated) .x.create_copy(c.x)
      if (c.y.associated) .y.create_copy(c.y)
   end

!  =============
!  Input methods
!  =============

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Any required data needed by the "keyword" is
   ! inputted from "stdin".
      keyword :: STR
      word :: STR
      word = keyword
      word.to_lower_case
      select case (word)
         case ("}                    ")  ! exit case
         case ("x_quadrature=        "); .read_x_quadrature
         case ("y_quadrature=        "); .read_y_quadrature
         case ("put                  "); .put
         case default;         UNKNOWN(word)
      end
   end

   read_x_quadrature
   ! Read in the x-quadrature object
      .x.destroy
      .x.create
      .x.read_keywords
   end

   read_y_quadrature
   ! Read in the y-quadrature object
      .y.destroy
      .y.create
      .y.read_keywords
   end

   finalize ::: leaky
   ! Check everything is OK after reading data. Make the roots and
   ! weights if we need to.

      if (.x.associated) .x.finalize
      if (.y.associated) .y.finalize

   end

!  ==============
!  Output methods
!  ==============

   put
   ! Put the quadrature object.
   ENSURE(.finalized,"not finalized")
      i :: INT
      stdout.flush
      stdout.text("QUADRATURE2 information:")
      stdout.flush
      if (.x.associated) then
         stdout.text("X axis:")
         .x.put
      end
      if (.y.associated) then
         stdout.text("Y axis:")
         .y.put
      end
   end

end
