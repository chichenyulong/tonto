!-------------------------------------------------------------------------------
!
! T_TENSOR: produces the elements of cartesian interaction tensors aka 
! 'T tensors' used in electrodynamics
!
! Copyright (C) Peter Spackman, 2017
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!-------------------------------------------------------------------------------
module T_TENSOR
   implicit none

contains
   create(a, b)
   ! create the T tensors from two locations
      a, b :: VEC{REAL}(3), IN
      r :: VEC{REAL}(3)
      d :: REAL
      i, j, k, l :: INT
      r = b - a
      d = r.norm
      .scalar = t0(d)

      .alpha = ZERO
      .x = t1(d, r(1)); .alpha(1) = .x
      .y = t1(d, r(2)); .alpha(2) = .y
      .z = t1(d, r(3)); .alpha(3) = .z

      .xx = t2(d, [r(1), r(1)], [1,1])
      .alpha_beta(1,1) = .xx
      .yy = t2(d, [r(2), r(2)], [2,2])
      .alpha_beta(2,2) = .yy
      .zz = t2(d, [r(3), r(3)], [3,3])
      .alpha_beta(3,3) = .zz
      .xy = t2(d, [r(1), r(2)], [1,2])
      .alpha_beta(1,2) = .xy
      .alpha_beta(2,1) = .xy
      .xz = t2(d, [r(1), r(3)], [1,3])
      .alpha_beta(1,3) = .xz
      .alpha_beta(3,1) = .xz
      .yz = t2(d, [r(2), r(3)], [2,3])
      .alpha_beta(2,3) = .yz
      .alpha_beta(3,2) = .yz

      .alpha_beta_gamma = ZERO
      .xxx = t3(d, [r(1), r(1), r(1)], [1,1,1])
      .alpha_beta_gamma(1,1,1) = .xxx
      .yyy = t3(d, [r(2), r(2), r(2)], [2,2,2])
      .alpha_beta_gamma(2,2,2) = .yyy
      .zzz = t3(d, [r(3), r(3), r(3)], [3,3,3])
      .alpha_beta_gamma(3,3,3) = .zzz
      .xxy = t3(d, [r(1), r(1), r(2)], [1,1,2])
      .alpha_beta_gamma(1,1,2) = .xxy
      .alpha_beta_gamma(1,2,1) = .xxy
      .alpha_beta_gamma(2,1,1) = .xxy
      .xxz = t3(d, [r(1), r(1), r(3)], [1,1,3])
      .alpha_beta_gamma(1,1,3) = .xxz
      .alpha_beta_gamma(1,3,1) = .xxz
      .alpha_beta_gamma(3,1,1) = .xxz
      .yyx = t3(d, [r(2), r(2), r(1)], [2,2,1])
      .alpha_beta_gamma(2,2,1) = .yyx
      .alpha_beta_gamma(2,1,2) = .yyx
      .alpha_beta_gamma(1,2,2) = .yyx
      .yyz = t3(d, [r(2), r(2), r(3)], [2,2,3])
      .alpha_beta_gamma(2,2,3) = .yyz
      .alpha_beta_gamma(2,3,2) = .yyz
      .alpha_beta_gamma(3,2,2) = .yyz
      .zzx = t3(d, [r(3), r(3), r(1)], [3,3,1])
      .alpha_beta_gamma(3,3,1) = .zzx
      .alpha_beta_gamma(3,1,3) = .zzx
      .alpha_beta_gamma(1,3,3) = .zzx
      .zzy = t3(d, [r(3), r(3), r(2)], [3,3,2])
      .alpha_beta_gamma(3,3,2) = .zzy
      .alpha_beta_gamma(3,2,3) = .zzy
      .alpha_beta_gamma(2,3,3) = .zzy
      .xyz = t3(d, [r(1), r(2), r(3)], [1,2,3])
      .alpha_beta_gamma(1,2,3) = .xyz
      .alpha_beta_gamma(1,3,2) = .xyz
      .alpha_beta_gamma(2,1,3) = .xyz
      .alpha_beta_gamma(2,3,1) = .xyz
      .alpha_beta_gamma(3,1,2) = .xyz
      .alpha_beta_gamma(3,2,1) = .xyz

      do i = 1, 3
      do j = 1, 3
      do k = 1, 3
         .alpha_beta_gamma(i,j,k) = t3(d, [r(i), r(j), r(k)], [i,j,k])
      end do
      end do
      end do

      .alpha_beta_gamma_delta = ZERO
      do i = 1, 3
      do j = 1, 3
      do k = 1, 3
      do l = 1, 3
         .alpha_beta_gamma_delta(i,j,k,l) = t4(d,[r(i),r(j),r(k),r(l)], [i,j,k,l])
      end do
      end do
      end do
      end do
   end

   create_fast(a, b) ::: pure
      self :: INOUT
   ! create the T tensors from two locations
      a, b :: VEC{REAL}(3), IN
      r :: VEC{REAL}(3)
      d :: REAL
      i, j, k, l :: INT
      r = b - a
      d = r.norm
      .scalar = t0(d)

      .alpha = ZERO
      .x = t1(d, r(1));
      .y = t1(d, r(2));
      .z = t1(d, r(3));

      .xx = t2_fast(d, r(1), r(1), 1,1)
      .yy = t2_fast(d, r(2), r(2), 2,2)
      .zz = t2_fast(d, r(3), r(3), 3,3)
      .xy = t2_fast(d, r(1), r(2), 1,2)
      .xz = t2_fast(d, r(1), r(3), 1,3)
      .yz = t2_fast(d, r(2), r(3), 2,3)

      .xxx = t3_fast(d, r(1), r(1), r(1), 1,1,1)
      .yyy = t3_fast(d, r(2), r(2), r(2), 2,2,2)
      .zzz = t3_fast(d, r(3), r(3), r(3), 3,3,3)
      .xxy = t3_fast(d, r(1), r(1), r(2), 1,1,2)
      .xxz = t3_fast(d, r(1), r(1), r(3), 1,1,3)
      .yyx = t3_fast(d, r(2), r(2), r(1), 2,2,1)
      .yyz = t3_fast(d, r(2), r(2), r(3), 2,2,3)
      .zzx = t3_fast(d, r(3), r(3), r(1), 3,3,1)
      .zzy = t3_fast(d, r(3), r(3), r(2), 3,3,2)
      .xyz = t3_fast(d, r(1), r(2), r(3), 1,2,3)
   end



   kd(i, j) result(res) ::: pure, selfless
   ! calculate the kronecker delta
      i, j :: INT, IN
      res :: INT
      res = 0
      if (i == j) res = 1
   end 

   t0(d) result(res) ::: pure, selfless
   ! calculate T elements of order 0 (point)
      d :: REAL, IN
      res :: REAL
      res = ONE/d
   end 

   t1(d, r) result(res) ::: pure, selfless
   ! calculate T elements of order 1 (charge-dipole)
      d, r :: REAL, IN
      res :: REAL
      res = -r / (d**3)
   end 
   
   t2(d, r, idx) result(res) ::: pure, selfless
   ! calculate T elements of order 2 (dipole-dipole/charge-quadrupole)
      d :: REAL, IN
      r :: VEC{REAL}(2), IN
      idx :: VEC{INT}(2), IN
      res :: REAL
      res = (THREE*r(1)*r(2)) - d*d * kd(idx(1),idx(2)) 
      res = res / (d**5)
   end 

   t2_fast(d, r1, r2, i,j) result(res) ::: pure, selfless
   ! calculate T elements of order 2 (dipole-dipole/charge-quadrupole)
      d :: REAL, IN
      r1, r2 :: REAL, IN
      i,j :: INT, IN
      res :: REAL
      res = (THREE*r1*r2) - d*d * kd(i,j) 
      res = res / (d**5)
   end 


   t3(d, r, idx) result(res) ::: pure, selfless
   ! calculate T elements of order 3 (quadrupole-quadrupole/charge-octapole)
      d :: REAL, IN
      r :: VEC{REAL}(3), IN
      idx :: VEC{INT}(3), IN
      res :: REAL
      d_12, d_13, d_23 :: INT
      d_12 = kd(idx(1),idx(2)); d_13 = kd(idx(1),idx(3))
      d_23 = kd(idx(2),idx(3))
      res = FIVE*r(1)*r(2)*r(3) - d*d * (r(1)*d_23 + r(2)*d_13 + r(3)*d_12)
      res = res * THREE / (d**SEVEN)
   end 

   t3_fast(d, r1, r2, r3, i, j, k) result(res) ::: pure, selfless
   ! calculate T elements of order 3 (quadrupole-quadrupole/charge-octapole)
      d :: REAL, IN
      r1,r2,r3 :: REAL, IN
      i,j,k :: INT, IN
      res :: REAL
      d_12, d_13, d_23 :: INT
      d_12 = kd(i,j); d_13 = kd(i,k)
      d_23 = kd(j,k)
      res = FIVE*r1*r2*r3 - d*d * (r1*d_23 + r2*d_13 + r3*d_12)
      res = res * THREE / (d**SEVEN)
   end 


   t4(d, r, idx) result(res) ::: pure, selfless
   ! calculate T elements of order (charge-hexadecapole)
      d :: REAL, IN
      r :: VEC{REAL}(4), IN
      idx :: VEC{INT}(4), IN
      res :: REAL
      d_12, d_13, d_14, d_23, d_24, d_34 :: INT
      d_12 = kd(idx(1),idx(2)); d_13 = kd(idx(1),idx(3)); d_14 = kd(idx(1),idx(4))
      d_23 = kd(idx(1),idx(3)); d_24 = kd(idx(2),idx(4)); d_34 = kd(idx(3),idx(4))
      res = r(1)*r(2)*d_34 + r(1)*r(3)*d_24 + r(1)*r(4)*d_23 + r(2)*r(3)*d_14 + r(2)*r(4)*d_13 + r(3)*r(4)*d_12
      res = 105d0*r(1)*r(2)*r(3)*r(4) - res*(15d0*d**TWO) + (THREE*d**FOUR)*(d_12*d_34 + d_13*d_24 + d_14*d_23)
      res = res/(d**NINE)
   end 


   interaction_energy(C_a, C_b, D_a, D_b, Q_a, Q_b, O_a, O_b) result(res) ::: public
   ! calculate the expectation value of the interaction operator up to l == 4
   ! excluding hexadecapole-charge term
      self :: IN
      C_a, C_b :: REAL, IN ! charges
      D_a, D_b :: VEC{REAL}(3), IN ! dipoles
      Q_a, Q_b :: MAT{REAL}(3,3), IN !quadrupoles
      O_a, O_b :: MAT3{REAL}(3,3,3), IN ! octupoles
      res :: VEC{REAL}(5)
      i,j,k,l :: INT
      total_a, total_b :: REAL
      res = ZERO
      ! charge-charge term
      res(1) = .scalar * C_a * C_b

      ! dipole-charge term
      do i = 1,3
         res(2) = res(2) + .alpha(i)*(C_a*D_b(i) - D_a(i)*C_b)
      end do

      ! charge-quadrupole/dipole-dipole term
      do i = 1,3
      do j = 1,3
         res(3) = res(3) + &
                  .alpha_beta(i,j)*( HALF *(C_a*Q_b(i,j)  + Q_a(i,j)*C_b) - D_a(i)*D_b(j))
      end do
      end do

      total_a = ZERO
      total_b = ZERO
      ! charge-octapole/quadrupole-dipole term
      do i = 1,3
      do j = 1,3
      do k = 1,3
         total_a = total_a + .alpha_beta_gamma(i,j,k)*(O_b(i,j,k)*C_a- O_a(i,j,k)*C_b)
         total_b = total_b + .alpha_beta_gamma(i,j,k)*(Q_b(i,j) * D_a(k) + Q_a(i,j) * D_b(k))
      end do
      end do
      end do

      res(4) = SIXTH * total_a + HALF *total_b
      total_a = ZERO
      total_b = ZERO
      do i = 1,3
      do j = 1,3
      do k = 1,3
      do l = 1,3
         total_a = total_a + .alpha_beta_gamma_delta(i,j,k,l) * Q_a(i,j)*Q_b(k,l) 
         total_b = total_b + .alpha_beta_gamma_delta(i,j,k,l) * (O_b(i,j,k)*D_a(l)  + D_b(l) * O_a(i,j,k))
      end do
      end do
      end do
      end do
      res(5) = QUARTER * total_a - SIXTH * total_b
   end

   electrostatic_potential(C_a, D_a, Q_a, O_a) result(res) ::: public
   ! calculate the expectation value of the interaction operator up to l == 4
   ! excluding hexadecapole-charge term
      self :: IN
      C_a :: REAL, IN ! charges
      D_a :: VEC{REAL}(3), IN ! dipoles
      Q_a :: MAT{REAL}(3,3), IN !quadrupoles
      O_a :: MAT3{REAL}(3,3,3), IN ! octupoles
      res :: VEC{REAL}(4)
      i,j,k :: INT
      total_a, total_b :: REAL
      res = ZERO
      ! charge-charge term

      res(1) = .scalar * C_a

      ! dipole-charge term
      do i = 1,3
         res(2) = res(2) + .alpha(i)*(D_a(i))
      end do

      ! charge-quadrupole/dipole-dipole term
      do i = 1,3
      do j = 1,3
         res(3) = res(3) + &
                  .alpha_beta(i,j)*( HALF *(Q_a(i,j)))
      end do
      end do

      total_a = ZERO
      total_b = ZERO
      ! charge-octapole/quadrupole-dipole term
      do i = 1,3
      do j = 1,3
      do k = 1,3
         total_a = total_a + .alpha_beta_gamma(i,j,k)*(O_a(i,j,k))
      end do
      end do
      end do

      res(4) = SIXTH * total_a + HALF *total_b
   end

   electrostatic_potential(C_a, D_a, Q_a, O_a) result(res) ::: public, pure
   ! calculate the expectation value of the interaction operator up to l == 4
   ! excluding hexadecapole-charge term
      self :: IN
      C_a :: REAL, IN ! charges
      D_a :: VEC{REAL}(3), IN ! dipoles
      Q_a :: VEC{REAL}(6), IN !quadrupoles
      O_a :: VEC{REAL}(10), IN ! octupoles
      res :: VEC{REAL}(4)
      i,j,k :: INT
      total_a, total_b :: REAL
      res = ZERO 
      ! charge term
      res(1) = .scalar * C_a

      ! dipole term
      do i = 1,3
         res(2) = res(2) + .alpha(i)*(D_a(i))
      end do

      ! quadrupole term
      res(3) = res(3) + .xx*HALF * Q_a(1)
      res(3) = res(3) + .yy*HALF * Q_a(2)
      res(3) = res(3) + .zz*HALF * Q_a(3)
      res(3) = res(3) + .xy*Q_a(4)
      res(3) = res(3) + .xz*Q_a(5)
      res(3) = res(3) + .yz*Q_a(6)

      ! octapole term
      res(4) = res(4) + .xxx*O_a(1)
      res(4) = res(4) + .yyy*O_a(2)
      res(4) = res(4) + .zzz*O_a(3)
      res(4) = res(4) * SIXTH
      res(4) = res(4) + HALF * .xxy * O_a(4)
      res(4) = res(4) + HALF * .xxz * O_a(5)
      res(4) = res(4) + HALF * .yyx * O_a(6)
      res(4) = res(4) + HALF * .yyz * O_a(7)
      res(4) = res(4) + HALF * .zzx * O_a(8)
      res(4) = res(4) + HALF * .zzy * O_a(9)
      res(4) = res(4) + .xyz * O_a(10)
   end

   electrostatic_potential_grid(C,D,Q,O,pos,pt,grid) ::: PURE
      self :: INOUT
      grid :: VEC{REAL}, INOUT
      pt :: MAT{REAL}, IN
      C :: REAL, IN ! charges
      pos, D :: VEC{REAL}(3), IN ! dipoles
      Q :: VEC{REAL}(6), IN !quadrupoles
      O :: VEC{REAL}(10), IN ! octupoles
      n_pt, k :: INT
      V :: VEC{REAL}(4)
      n_pt = grid.dim
      do k = 1, n_pt
          .create_fast(pos, pt(k,:))
          V = .electrostatic_potential(C,D,Q,O)
          grid(k) = grid(k) - sum(V)
      end
   end

end module
