!-------------------------------------------------------------------------------
!
! T_TENSOR: produces the elements of cartesian interaction tensors aka 
! 'T tensors' used in electrodynamics
!
! Copyright (C) Peter Spackman, 2017
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!-------------------------------------------------------------------------------
module T_TENSOR
   implicit none

contains
   create(a, b)
   ! create the T tensors from two locations
      a, b :: VEC{REAL}(3), IN
      r :: VEC{REAL}(3)
      d :: REAL
      i, j, k, l :: INT
      r = b - a
      d = r.norm
      .scalar = t0(d)

      .alpha = ZERO
      do i = 1, 3 
         .alpha(i) = t1(d, r(i))
      end do

      .alpha_beta = ZERO
      do i = 1, 3
      do j = 1, 3
         .alpha_beta(i,j) = t2(d, [r(i), r(j)], [i,j])
      end do
      end do

      .alpha_beta_gamma = ZERO
      do i = 1, 3
      do j = 1, 3
      do k = 1, 3
         .alpha_beta_gamma(i,j,k) = t3(d, [r(i), r(j), r(k)], [i,j,k])
      end do
      end do
      end do

      .alpha_beta_gamma_delta = ZERO
      do i = 1, 3
      do j = 1, 3
      do k = 1, 3
      do l = 1, 3
         .alpha_beta_gamma_delta(i,j,k,l) = t4(d,[r(i),r(j),r(k),r(l)], [i,j,k,l])
      end do
      end do
      end do
      end do
   end

   kd(i, j) result(res) ::: pure, selfless
   ! calculate the kronecker delta
      i, j :: INT, IN
      res :: INT
      res = 0
      if (i == j) res = 1
   end 

   t0(d) result(res) ::: pure, selfless
   ! calculate T elements of order 0 (point)
      d :: REAL, IN
      res :: REAL
      res = ONE/d
   end 

   t1(d, r) result(res) ::: pure, selfless
   ! calculate T elements of order 1 (charge-dipole)
      d, r :: REAL, IN
      res :: REAL
      res = -r / (d**3)
   end 
   
   t2(d, r, idx) result(res) ::: pure, selfless
   ! calculate T elements of order 2 (dipole-dipole/charge-quadrupole)
      d :: REAL, IN
      r :: VEC{REAL}(2), IN
      idx :: VEC{INT}(2), IN
      res :: REAL
      res = (THREE*r(1)*r(2)) - d*d * kd(idx(1),idx(2)) 
      res = res / (d**5)
   end 

   t3(d, r, idx) result(res) ::: pure, selfless
   ! calculate T elements of order 3 (quadrupole-quadrupole/charge-octapole)
      d :: REAL, IN
      r :: VEC{REAL}(3), IN
      idx :: VEC{INT}(3), IN
      res :: REAL
      d_12, d_13, d_23 :: INT
      d_12 = kd(idx(1),idx(2)); d_13 = kd(idx(1),idx(3))
      d_23 = kd(idx(2),idx(3))
      res = FIVE*r(1)*r(2)*r(3) - d*d * (r(1)*d_23 + r(2)*d_13 + r(3)*d_12)
      res = res * THREE / (d**SEVEN)
   end 

   t4(d, r, idx) result(res) ::: pure, selfless
   ! calculate T elements of order (charge-hexadecapole)
      d :: REAL, IN
      r :: VEC{REAL}(4), IN
      idx :: VEC{INT}(4), IN
      res :: REAL
      d_12, d_13, d_14, d_23, d_24, d_34 :: INT
      d_12 = kd(idx(1),idx(2)); d_13 = kd(idx(1),idx(3)); d_14 = kd(idx(1),idx(4))
      d_23 = kd(idx(1),idx(3)); d_24 = kd(idx(2),idx(4)); d_34 = kd(idx(3),idx(4))
      res = r(1)*r(2)*d_34 + r(1)*r(3)*d_24 + r(1)*r(4)*d_23 + r(2)*r(3)*d_14 + r(2)*r(4)*d_13 + r(3)*r(4)*d_12
      res = 105d0*r(1)*r(2)*r(3)*r(4) - res*(15d0*d**TWO) + (THREE*d**FOUR)*(d_12*d_34 + d_13*d_24 + d_14*d_23)
      res = res/(d**NINE)
   end 


   interaction_energy(C_a, C_b, D_a, D_b, Q_a, Q_b, O_a, O_b) result(res) ::: public
   ! calculate the expectation value of the interaction operator up to l == 4
   ! excluding hexadecapole-charge term
      self :: IN
      C_a, C_b :: REAL, IN ! charges
      D_a, D_b :: VEC{REAL}(3), IN ! dipoles
      Q_a, Q_b :: MAT{REAL}(3,3), IN !quadrupoles
      O_a, O_b :: MAT3{REAL}(3,3,3), IN ! octupoles
      res :: VEC{REAL}(5)
      i,j,k,l :: INT
      total_a, total_b :: REAL
      res = ZERO
      ! charge-charge term
      res(1) = .scalar * C_a * C_b

      ! dipole-charge term
      do i = 1,3
         res(2) = res(2) + .alpha(i)*(C_a*D_b(i) - D_a(i)*C_b)
      end do

      ! charge-quadrupole/dipole-dipole term
      do i = 1,3
      do j = 1,3
         res(3) = res(3) + &
                  .alpha_beta(i,j)*( HALF *(C_a*Q_b(i,j)  + Q_a(i,j)*C_b) - D_a(i)*D_b(j))
      end do
      end do

      total_a = ZERO
      total_b = ZERO
      ! charge-octapole/quadrupole-dipole term
      do i = 1,3
      do j = 1,3
      do k = 1,3
         total_a = total_a + .alpha_beta_gamma(i,j,k)*(O_b(i,j,k)*C_a- O_a(i,j,k)*C_b)
         total_b = total_b + .alpha_beta_gamma(i,j,k)*(Q_b(i,j) * D_a(k) + Q_a(i,j) * D_b(k))
      end do
      end do
      end do

      res(4) = SIXTH * total_a + HALF *total_b
      total_a = ZERO
      total_b = ZERO
      do i = 1,3
      do j = 1,3
      do k = 1,3
      do l = 1,3
         total_a = total_a + .alpha_beta_gamma_delta(i,j,k,l) * Q_a(i,j)*Q_b(k,l) 
         total_b = total_b + .alpha_beta_gamma_delta(i,j,k,l) * (O_b(i,j,k)*D_a(l)  + D_b(l) * O_a(i,j,k))
      end do
      end do
      end do
      end do
      res(5) = QUARTER * total_a - SIXTH * total_b
   end

   electrostatic_potential(C_a, D_a, Q_a, O_a) result(res) ::: public
   ! calculate the expectation value of the interaction operator up to l == 4
   ! excluding hexadecapole-charge term
      self :: IN
      C_a :: REAL, IN ! charges
      D_a :: VEC{REAL}(3), IN ! dipoles
      Q_a :: MAT{REAL}(3,3), IN !quadrupoles
      O_a :: MAT3{REAL}(3,3,3), IN ! octupoles
      res :: VEC{REAL}(4)
      i,j,k :: INT
      total_a, total_b :: REAL
      res = ZERO
      ! charge-charge term

      res(1) = .scalar * C_a

      ! dipole-charge term
      do i = 1,3
         res(2) = res(2) + .alpha(i)*(D_a(i))
      end do

      ! charge-quadrupole/dipole-dipole term
      do i = 1,3
      do j = 1,3
         res(3) = res(3) + &
                  .alpha_beta(i,j)*( HALF *(Q_a(i,j)))
      end do
      end do

      total_a = ZERO
      total_b = ZERO
      ! charge-octapole/quadrupole-dipole term
      do i = 1,3
      do j = 1,3
      do k = 1,3
         total_a = total_a + .alpha_beta_gamma(i,j,k)*(O_a(i,j,k))
      end do
      end do
      end do

      res(4) = SIXTH * total_a + HALF *total_b
   end

end module
