!---------------------------------------------------------------------------
!
! VEC{VEC_{VEC_{INTRINSIC}}} : 
!
! A list of list of list of intrinsic quantities.
!
! Copyright (C) Daniel Grimwood, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

virtual module VEC{VEC_{VEC_{INTRINSIC}}}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: leaky, PURE
   ! Allocate vector with dimension "dim"
      self :: allocatable, OUT
      dim :: INT, IN

   ENSURE(dim>=0, "array dimension is -ve, dim = "//trim(INT:to_str(dim)))

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(dim),stat=status)
      ENSURE(status==0,"error in allocating memory")
      if (status/=0) stop
#else
      allocate(self(dim))
#endif

   end

   create(dim,dimv) ::: leaky, PURE
   ! Allocate a vector of vectors with primary dimension "dim" and
   ! secondary dimension "dimv"
      self :: allocatable, OUT
      dim,dimv :: INT, IN

      .create(dim)
      .create_vec(dimv)

   end

   create(dim,bounds2) ::: leaky, PURE
   ! Allocate a vector of vectors with non-standard secondary "bounds2"
      self :: allocatable, OUT
      dim :: INT, IN
      bounds2 :: VEC{INT}(2), IN

      .create(dim)
      .create_vec(bounds2)

   end

   create(bounds1) ::: leaky, PURE
   ! Allocate a vector of vectors with non-standard primary "bounds1"
      self :: allocatable, OUT
      bounds1 :: VEC{INT}(2), IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(bounds1(1):bounds1(2)),STAT=status)
      ENSURE(status==0,"error in deallocating memory")
      if (status/=0) stop
#else
      allocate(self(bounds1(1):bounds1(2)))
#endif

   end

   destroy ::: leaky, PURE
   ! Deallocate the vector
      self :: allocatable, OUT

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

      if (.deallocated) return

#ifdef USE_PRECONDITIONS
      deallocate(self,stat=status)
      ENSURE(status==0,"error in deallocating memory")
      if (status/=0) stop
#else
      deallocate(self)
#endif

   end

   create_vec(dimv) ::: leaky, PURE
   ! Allocate the array part
      self :: INOUT
      dimv :: INT, IN

      i :: INT

      do i = 1,.dim
         self(i).element.create(dimv)
      end

   end

   create_vec(bounds) ::: leaky, PURE
   ! Allocate the array part
      self :: INOUT
      bounds :: VEC{INT}(2), IN

      i :: INT

      do i = 1,.dim
         self(i).element.create(bounds)
      end

   end

!  ==================
!  Size-of operations
!  ==================

   max_element_dim result (res) ::: pure
   ! Return the maximum element dimension
      self :: IN
      res :: INT

      s :: INT

      res = 0

      do s = 1,.dim
         res = max(res,self(s).element.dim)
      end

   end

end
