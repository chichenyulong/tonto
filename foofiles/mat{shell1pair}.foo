!-------------------------------------------------------------------------------
!
! MAT{SHELL1PAIR} : a vector of pairs of gaussian SHELL1PAIR's.
!
! This object is used to store precalculated information used in ERI integral
! evaluation.
!
! Copyright (C) Dylan Jayatilaka, 2000
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!-------------------------------------------------------------------------------

module MAT{SHELL1PAIR}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim1,dim2) ::: get_from(MAT{OBJECT}), leaky, PURE
   ! Allocate a matrix with the given dimensions
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

!  ============================
!  Size-of and shape operations 
!  ============================

   is_same_shape_as(a) result (res) ::: get_from(MAT{OBJECT}), pure
   ! Returns TRUE if the matrix "a" has the same shape as "self"
   end

   is_transposed_shape_of(a) result (res) ::: get_from(MAT{OBJECT}), pure
   ! Returns TRUE if the matrix "a" is the transposed shape of self
   end

   is_square result (res) ::: get_from(MAT{OBJECT}), pure
   ! Returns TRUE if the matrix is square
   end

!  ======
!  Output
!  ======

   dump(object_name,lower_triangle) ::: get_from(MAT{OBJECT})
   ! Dump a matrix object in text format
   end

   dmpp(object_name,lower_triangle) ::: get_from(MAT{OBJECT})
   ! Dump a matrix pointer object in text format
   end

end
