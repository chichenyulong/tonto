!---------------------------------------------------------------------------
!
!  VEC{MAT4_{INTRINSIC}}: Vector of MAT4{INTRINSIC} matrices
!
! Copyright (C) Dylan Jayatilaka, 2006
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

virtual module VEC{MAT4_{INTRINSIC}}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim) ::: leaky, PURE
   ! Create the object
      self :: PTR
      dim :: INT, IN

      status :: INT

      allocate(self(dim),STAT=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

      .nullify_ptr_part

   end

   destroy ::: leaky, PURE
   ! Destroy the object
      self :: PTR

      status :: INT

      if (.disassociated) return

      .destroy_ptr_part

      deallocate(self,stat=status)

      ENSURE(status==0,"error in deallocating memory")
      status = status
      status = 0

   end

   nullify_ptr_part ::: pure
   ! Nullify the pointer parts
      self :: INOUT

      i :: INT

      do i = 1,size(self)
         nullify(self(i)%element)
      end

   end

   destroy_ptr_part ::: leaky, PURE
   ! Destroy the pointer parts
      self :: INOUT

      i :: INT

      do i = 1,size(self)
         self(i)%element.destroy
      end

   end

end
