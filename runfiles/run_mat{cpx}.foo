! Copyright (C) Dylan Jayatilaka, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: run_mat{cpx}.foo 3396 2009-12-10 02:17:06Z dylan_ $

program run_MAT{CPX}
   implicit none
   n,q :: MAT{REAL}*
   w,v,m,p,Lsq :: MAT{CPX}*
   L :: VEC{CPX}*
   e :: VEC{REAL}*
   start,finish :: REAL
   dim :: INT


   TONTO_CREATE
   stdout.create_stdout
  
   do dim = 100,1000,50
      call cpu_time(start)

      L.create(dim*(dim+1)/2)
      w.create(dim,dim)
      p.create(dim,dim)
      m.create(dim,dim)
      n.create(dim,dim)
      q.create(dim,dim)
      v.create(dim,dim)
      e.create(dim)

      ! Random m
      call random_number(n)
      call random_number(q)
      m = dcmplx(n,q)
      m.hermitianize
      m.solve_hermitian_eigenproblem(e,v)

      ! Make a positive definite matrix p
      v(:,1) = -v(:,1)
      e = abs(e)
      w.to_product_with_diagonal(v,e)
      p.to_product_of(w,v,dagger_b=TRUE)

      ! Check if it is ...
      p.solve_hermitian_eigenproblem(e,v)
      m = ZERO 
   !   stdout.text("comparison of L:")
   !   stdout.put(e)

      ! Cholesky
      p.cholesky_decomposition(L)
      
      call cpu_time(finish)
      stdout.show("Dim: ",dim)
      stdout.show(": ", finish - start)

      Lsq.create(dim,dim)
      Lsq.unzip_lower_triangle(L)
   !   stdout.text("L:")
   !   stdout.put(L)

   ! Test if the decomposition works
      m.to_product_of(Lsq,Lsq,dagger_b=TRUE)

      stdout.show("M and P are the same?",m.same_as(p))
   end

   TEXTFILE:destroy(stdout)

   TONTO_DESTROY



end

