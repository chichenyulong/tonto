! Copyright (C) Dylan Jayatilaka, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: run_qr.foo 3396 2009-12-10 02:17:06Z dylan_ $

program run_QR

   implicit none

   nu,v :: VEC{REAL}*
   P,M_0,M_d,M_c,Q,R,I_0,I_c,I_d :: MAT{REAL}*
   start,finish,e_i,e_d,b :: REAL
   i,j,dim1,dim2 :: INT

   TONTO_CREATE
   

   stdout.create_stdout

   dim1 = 25
   dim2 = 15

   M_0.create(dim1,dim2)
   M_c.create(dim1,dim2)
   M_d.create(dim1,dim2)
   Q.create(dim1,dim2)
   I_0.create(dim2,dim2)
   I_c.create(dim2,dim2)
   I_d.create(dim2,dim2)
   R.create(dim2,dim2)
   e_i = ZERO

   !Creates the Vandermonde matrix from Higham
   !for testing
   do j=1,dim2
      do i=1,dim1
         M_0(i,j)=(real(i)/real(dim1))**(j-1)
      end do
      I_0(j,j) = ONE
   end do

   !Tests with random numbers 
   call random_number(M_0)
   !classical GS QR decomposition
   call cpu_time(start)
   
   M_0.classical_gram_schmidt_qr(Q,R)
   
   call cpu_time(finish)
   
   stdout.text("Classical GS took: ")
   print*, finish - start

   M_c = matmul(Q,R)
   M_d = M_0 - M_c
   I_c.to_product_of(Q,Q,transpose_A=TRUE)
   I_d = I_0 - I_c

   do i =1,dim1
      e_d = e_d + norm2(M_d(i,:))**2
   end do
   e_d = sqrt(e_d)
   do i =1,dim2
      e_i = e_i + norm2(I_d(i,:))**2
   end do
   e_i = sqrt(e_i)
  
   stdout.text("||I-Q**(T)Q|| ")
   print*,e_i
   stdout.text("||A-QR|| ")
   print*,e_d
   e_i = ZERO
   e_d = ZERO

   !modified GS QR decomposition
   call cpu_time(start)
   
   M_0.modified_gram_schmidt_qr(Q,R)
   
   call cpu_time(finish)

   stdout.text("Modified GS took: ")
   print*, finish - start


   M_c = matmul(Q,R)
   M_d = M_0 - M_c
   I_c.to_product_of(Q,Q,transpose_A=TRUE)
   I_d = I_0 - I_c

   do i =1,dim1
      e_d = e_d + norm2(M_d(i,:))**2
   end do
   e_d = sqrt(e_d)
   do i =1,dim2
      e_i = e_i + norm2(I_d(i,:))**2
   end do
   e_i = sqrt(e_i)
  
   stdout.text("||I-Q**(T)Q|| ")
   print*,e_i
   stdout.text("||A-QR|| ")
   print*,e_d
   e_i = ZERO
   e_d = ZERO

   !Adjusts the sizes of matrices for the upcoming
   !QR decompositions (square Q rectangular R)
   Q.destroy
   R.destroy
   I_c.destroy
   I_0.destroy
   I_d.destroy
   Q.create(dim1,dim1)
   I_0.create(dim1,dim1)
   I_c.create(dim1,dim1)
   I_d.create(dim1,dim1)
   R.create(dim1,dim2)
   P.create(dim1,dim1)
   v.create(dim1)
   nu.create(dim1)

   I_0 = ZERO
   do j=1,dim1
      I_0(j,j) = ONE
   end do

   !Tests the householder function
   call random_number(v)
   call cpu_time(start)
   
   v.householder_vector(nu,b)
  
   call cpu_time(finish)

   stdout.text("Householder Vector took: ")
   print*, finish - start
   
   P = I_0 - b*nu.outer_product_with(nu)
   I_c.to_product_of(P,P,transpose_A=TRUE)
   I_d = I_0 - I_c
   nu = matmul(P,v)
   do i =1,dim2
      e_i = e_i + norm2(I_d(i,:))**2
   end do
   e_i = sqrt(e_i)
   e_d = (norm2(v) - nu(1))**2 
   e_d = e_d + norm2(nu(2:))**2
   e_d = sqrt(e_d)
   

   stdout.text("||I-P**(T)P|| ")
   print*,e_i
   e_i = ZERO
   e_d = ZERO

   !Householder QR decomposition
   call cpu_time(start)
   
   M_0.householder_qr(R,Q)
   
   call cpu_time(finish)
   
   stdout.text("Householder QR took: ")
   print*, finish - start

   M_c = matmul(Q,R)
   M_d = M_0 - M_c
   I_c.to_product_of(Q,Q,transpose_A=TRUE)
   I_d = I_0 - I_c

   do i =1,dim1
      e_d = e_d + norm2(M_d(i,:))**2
   end do
   e_d = sqrt(e_d)
   do i =1,dim2
      e_i = e_i + norm2(I_d(i,:))**2
   end do
   e_i = sqrt(e_i)
   
  
   stdout.text("||I-Q**(T)Q|| ")
   print*,e_i
   stdout.text("||A-QR|| ")
   print*,e_d
   e_i = ZERO
   e_d = ZERO
   
   !Block Householder QR decomposition
   call cpu_time(start)
   
   M_0.block_householder_qr(R,Q)
   
   call cpu_time(finish)
   
   stdout.text("Block Householder QR took: ")
   print*, finish - start

   M_c = matmul(Q,R)
   M_d = M_0 - M_c
   I_c.to_product_of(Q,Q,transpose_A=TRUE)
   I_d = I_0 - I_c

   do i =1,dim1
      e_d = e_d + norm2(M_d(i,:))**2
   end do
   e_d = sqrt(e_d)
   do i =1,dim2
      e_i = e_i + norm2(I_d(i,:))**2
   end do
   e_i = sqrt(e_i)
  
   stdout.text("||I-Q**(T)Q|| ")
   print*,e_i
   stdout.text("||A-QR|| ")
   print*,e_d
   e_i = ZERO
   e_d = ZERO
 
   !Fast Givens QR decomposition
   call cpu_time(start)

   M_0.fast_givens_qr(R,Q)
   
   call cpu_time(finish)
   
   stdout.text("Fast Givens QR took: ")
   print*, finish - start

   M_c = matmul(Q,R)
   M_d = M_0 - M_c
   I_c.to_product_of(Q,Q,transpose_A=TRUE)
   I_d = I_0 - I_c

   do i =1,dim1
      e_d = e_d + norm2(M_d(i,:))**2
   end do
   e_d = sqrt(e_d)
   do i =1,dim2
      e_i = e_i + norm2(I_d(i,:))**2
   end do
   e_i = sqrt(e_i)
  
   stdout.text("||I-Q**(T)Q|| ")
   print*,e_i
   stdout.text("||A-QR|| ")
   print*,e_d
   e_i = ZERO
   e_d = ZERO

   TEXTFILE:destroy(stdout)

   TEXTFILE:destroy(stdout)

   TONTO_DESTROY

end

