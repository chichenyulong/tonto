! Copyright (C) Dylan Jayatilaka, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: run_int.foo 3505 2011-06-26 18:16:54Z dylan_ $

program run_LEAST_SQUARES
   USE VEC_REAL_MODULE
   implicit none

   dim,num,it,iter :: INT
   start, finish, tol :: REAL
   x,x_min :: VEC{REAL}(2)
   y,y_min :: VEC{REAL}*
   val :: STR
   
   ! Macro to create Tonto system object
   ! Initialise MPI parallel stuff too.
   TONTO_CREATE
   

   ! Initialise standard I/O files.
   ! Always have this.
   std_time.start_timing
   stdin.create_stdin;   !stdin.open
   stdout.create_stdout; !stdout.open
   stderr.create_stderr; !stderr.open
   
   num= 15 
   iter = 100
   tol = 10d-6
   dim = iter

   x(1) = 3
   x(2) = 3
   call cpu_time(start)
   VEC{REAL}::minimize_L_BFGS(VEC{REAL}::rosenbrock_function,VEC{REAL}::d_rosenbrock_function,x,num,x_min,tol,iter,it)
   call cpu_time(finish)     
   print*, "The minimum value for this function is at: ", x_min, "it took ", it, " iterations and ", finish - start, "s"

   x(1) = 1
   x(2) = 1
   call cpu_time(start)
   VEC{REAL}::minimize_L_BFGS(VEC{REAL}::himmelblau_function,VEC{REAL}::d_himmelblau_function,x,num,x_min,tol,iter,it)
   call cpu_time(finish)     
        
   print*, "The minimum value for this function is at: ", x_min, "it took ", it, " iterations and ", finish - start, "s"

   x(1) = 4
   x(2) = 2
   call cpu_time(start)
   VEC{REAL}::minimize_L_BFGS(VEC{REAL}::beale_function,VEC{REAL}::d_beale_function,x,num,x_min,tol,iter,it)
   call cpu_time(finish)     
        
   print*, "The minimum value for this function is at: ", x_min, "it took ", it, " iterations and ", finish - start, "s"
   
   ! For testing multiple dimensions
   do dim = 10000,1000000,10000
      y.create(dim)
      y_min.create(dim)
      y = ONE
      call cpu_time(start)
      VEC{REAL}::minimize_L_BFGS(VEC{REAL}::sphere_function,VEC{REAL}::d_sphere_function,y,num,y_min,tol,iter,it)
      call cpu_time(finish)     
        
      print*, dim
      print*, "The minimum value for this function is at Euclidean norm: ", norm2(y_min), "it took ", it, " iterations and ", finish - start, "s"

      y.destroy
      y_min.destroy
   end do

   ! Clean-up files
   TEXTFILE:destroy(stderr)
   TEXTFILE:destroy(stdout)
   TEXTFILE:destroy(stdin)

   ! Clean-up tonto system
   TONTO_DESTROY

end






